package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/block-explorer/etl/models"
)

// StorageMock implements interfaces.Storage
type StorageMock struct {
	t minimock.Tester

	funcCompletePulse          func(pulseNumber int) (err error)
	inspectFuncCompletePulse   func(pulseNumber int)
	afterCompletePulseCounter  uint64
	beforeCompletePulseCounter uint64
	CompletePulseMock          mStorageMockCompletePulse

	funcGetIncompletePulses          func() (pa1 []models.Pulse, err error)
	inspectFuncGetIncompletePulses   func()
	afterGetIncompletePulsesCounter  uint64
	beforeGetIncompletePulsesCounter uint64
	GetIncompletePulsesMock          mStorageMockGetIncompletePulses

	funcGetJetDrops          func(pulse models.Pulse) (ja1 []models.JetDrop, err error)
	inspectFuncGetJetDrops   func(pulse models.Pulse)
	afterGetJetDropsCounter  uint64
	beforeGetJetDropsCounter uint64
	GetJetDropsMock          mStorageMockGetJetDrops

	funcGetLifeline          func(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string) (ra1 []models.Record, i1 int, err error)
	inspectFuncGetLifeline   func(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string)
	afterGetLifelineCounter  uint64
	beforeGetLifelineCounter uint64
	GetLifelineMock          mStorageMockGetLifeline

	funcGetRecord          func(ref models.Reference) (r1 models.Record, err error)
	inspectFuncGetRecord   func(ref models.Reference)
	afterGetRecordCounter  uint64
	beforeGetRecordCounter uint64
	GetRecordMock          mStorageMockGetRecord

	funcSaveJetDropData          func(jetDrop models.JetDrop, records []models.Record) (err error)
	inspectFuncSaveJetDropData   func(jetDrop models.JetDrop, records []models.Record)
	afterSaveJetDropDataCounter  uint64
	beforeSaveJetDropDataCounter uint64
	SaveJetDropDataMock          mStorageMockSaveJetDropData

	funcSavePulse          func(pulse models.Pulse) (err error)
	inspectFuncSavePulse   func(pulse models.Pulse)
	afterSavePulseCounter  uint64
	beforeSavePulseCounter uint64
	SavePulseMock          mStorageMockSavePulse
}

// NewStorageMock returns a mock for interfaces.Storage
func NewStorageMock(t minimock.Tester) *StorageMock {
	m := &StorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CompletePulseMock = mStorageMockCompletePulse{mock: m}
	m.CompletePulseMock.callArgs = []*StorageMockCompletePulseParams{}

	m.GetIncompletePulsesMock = mStorageMockGetIncompletePulses{mock: m}

	m.GetJetDropsMock = mStorageMockGetJetDrops{mock: m}
	m.GetJetDropsMock.callArgs = []*StorageMockGetJetDropsParams{}

	m.GetLifelineMock = mStorageMockGetLifeline{mock: m}
	m.GetLifelineMock.callArgs = []*StorageMockGetLifelineParams{}

	m.GetRecordMock = mStorageMockGetRecord{mock: m}
	m.GetRecordMock.callArgs = []*StorageMockGetRecordParams{}

	m.SaveJetDropDataMock = mStorageMockSaveJetDropData{mock: m}
	m.SaveJetDropDataMock.callArgs = []*StorageMockSaveJetDropDataParams{}

	m.SavePulseMock = mStorageMockSavePulse{mock: m}
	m.SavePulseMock.callArgs = []*StorageMockSavePulseParams{}

	return m
}

type mStorageMockCompletePulse struct {
	mock               *StorageMock
	defaultExpectation *StorageMockCompletePulseExpectation
	expectations       []*StorageMockCompletePulseExpectation

	callArgs []*StorageMockCompletePulseParams
	mutex    sync.RWMutex
}

// StorageMockCompletePulseExpectation specifies expectation struct of the Storage.CompletePulse
type StorageMockCompletePulseExpectation struct {
	mock    *StorageMock
	params  *StorageMockCompletePulseParams
	results *StorageMockCompletePulseResults
	Counter uint64
}

// StorageMockCompletePulseParams contains parameters of the Storage.CompletePulse
type StorageMockCompletePulseParams struct {
	pulseNumber int
}

// StorageMockCompletePulseResults contains results of the Storage.CompletePulse
type StorageMockCompletePulseResults struct {
	err error
}

// Expect sets up expected params for Storage.CompletePulse
func (mmCompletePulse *mStorageMockCompletePulse) Expect(pulseNumber int) *mStorageMockCompletePulse {
	if mmCompletePulse.mock.funcCompletePulse != nil {
		mmCompletePulse.mock.t.Fatalf("StorageMock.CompletePulse mock is already set by Set")
	}

	if mmCompletePulse.defaultExpectation == nil {
		mmCompletePulse.defaultExpectation = &StorageMockCompletePulseExpectation{}
	}

	mmCompletePulse.defaultExpectation.params = &StorageMockCompletePulseParams{pulseNumber}
	for _, e := range mmCompletePulse.expectations {
		if minimock.Equal(e.params, mmCompletePulse.defaultExpectation.params) {
			mmCompletePulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCompletePulse.defaultExpectation.params)
		}
	}

	return mmCompletePulse
}

// Inspect accepts an inspector function that has same arguments as the Storage.CompletePulse
func (mmCompletePulse *mStorageMockCompletePulse) Inspect(f func(pulseNumber int)) *mStorageMockCompletePulse {
	if mmCompletePulse.mock.inspectFuncCompletePulse != nil {
		mmCompletePulse.mock.t.Fatalf("Inspect function is already set for StorageMock.CompletePulse")
	}

	mmCompletePulse.mock.inspectFuncCompletePulse = f

	return mmCompletePulse
}

// Return sets up results that will be returned by Storage.CompletePulse
func (mmCompletePulse *mStorageMockCompletePulse) Return(err error) *StorageMock {
	if mmCompletePulse.mock.funcCompletePulse != nil {
		mmCompletePulse.mock.t.Fatalf("StorageMock.CompletePulse mock is already set by Set")
	}

	if mmCompletePulse.defaultExpectation == nil {
		mmCompletePulse.defaultExpectation = &StorageMockCompletePulseExpectation{mock: mmCompletePulse.mock}
	}
	mmCompletePulse.defaultExpectation.results = &StorageMockCompletePulseResults{err}
	return mmCompletePulse.mock
}

//Set uses given function f to mock the Storage.CompletePulse method
func (mmCompletePulse *mStorageMockCompletePulse) Set(f func(pulseNumber int) (err error)) *StorageMock {
	if mmCompletePulse.defaultExpectation != nil {
		mmCompletePulse.mock.t.Fatalf("Default expectation is already set for the Storage.CompletePulse method")
	}

	if len(mmCompletePulse.expectations) > 0 {
		mmCompletePulse.mock.t.Fatalf("Some expectations are already set for the Storage.CompletePulse method")
	}

	mmCompletePulse.mock.funcCompletePulse = f
	return mmCompletePulse.mock
}

// When sets expectation for the Storage.CompletePulse which will trigger the result defined by the following
// Then helper
func (mmCompletePulse *mStorageMockCompletePulse) When(pulseNumber int) *StorageMockCompletePulseExpectation {
	if mmCompletePulse.mock.funcCompletePulse != nil {
		mmCompletePulse.mock.t.Fatalf("StorageMock.CompletePulse mock is already set by Set")
	}

	expectation := &StorageMockCompletePulseExpectation{
		mock:   mmCompletePulse.mock,
		params: &StorageMockCompletePulseParams{pulseNumber},
	}
	mmCompletePulse.expectations = append(mmCompletePulse.expectations, expectation)
	return expectation
}

// Then sets up Storage.CompletePulse return parameters for the expectation previously defined by the When method
func (e *StorageMockCompletePulseExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockCompletePulseResults{err}
	return e.mock
}

// CompletePulse implements interfaces.Storage
func (mmCompletePulse *StorageMock) CompletePulse(pulseNumber int) (err error) {
	mm_atomic.AddUint64(&mmCompletePulse.beforeCompletePulseCounter, 1)
	defer mm_atomic.AddUint64(&mmCompletePulse.afterCompletePulseCounter, 1)

	if mmCompletePulse.inspectFuncCompletePulse != nil {
		mmCompletePulse.inspectFuncCompletePulse(pulseNumber)
	}

	mm_params := &StorageMockCompletePulseParams{pulseNumber}

	// Record call args
	mmCompletePulse.CompletePulseMock.mutex.Lock()
	mmCompletePulse.CompletePulseMock.callArgs = append(mmCompletePulse.CompletePulseMock.callArgs, mm_params)
	mmCompletePulse.CompletePulseMock.mutex.Unlock()

	for _, e := range mmCompletePulse.CompletePulseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCompletePulse.CompletePulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCompletePulse.CompletePulseMock.defaultExpectation.Counter, 1)
		mm_want := mmCompletePulse.CompletePulseMock.defaultExpectation.params
		mm_got := StorageMockCompletePulseParams{pulseNumber}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCompletePulse.t.Errorf("StorageMock.CompletePulse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCompletePulse.CompletePulseMock.defaultExpectation.results
		if mm_results == nil {
			mmCompletePulse.t.Fatal("No results are set for the StorageMock.CompletePulse")
		}
		return (*mm_results).err
	}
	if mmCompletePulse.funcCompletePulse != nil {
		return mmCompletePulse.funcCompletePulse(pulseNumber)
	}
	mmCompletePulse.t.Fatalf("Unexpected call to StorageMock.CompletePulse. %v", pulseNumber)
	return
}

// CompletePulseAfterCounter returns a count of finished StorageMock.CompletePulse invocations
func (mmCompletePulse *StorageMock) CompletePulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCompletePulse.afterCompletePulseCounter)
}

// CompletePulseBeforeCounter returns a count of StorageMock.CompletePulse invocations
func (mmCompletePulse *StorageMock) CompletePulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCompletePulse.beforeCompletePulseCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.CompletePulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCompletePulse *mStorageMockCompletePulse) Calls() []*StorageMockCompletePulseParams {
	mmCompletePulse.mutex.RLock()

	argCopy := make([]*StorageMockCompletePulseParams, len(mmCompletePulse.callArgs))
	copy(argCopy, mmCompletePulse.callArgs)

	mmCompletePulse.mutex.RUnlock()

	return argCopy
}

// MinimockCompletePulseDone returns true if the count of the CompletePulse invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockCompletePulseDone() bool {
	for _, e := range m.CompletePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CompletePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCompletePulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCompletePulse != nil && mm_atomic.LoadUint64(&m.afterCompletePulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCompletePulseInspect logs each unmet expectation
func (m *StorageMock) MinimockCompletePulseInspect() {
	for _, e := range m.CompletePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.CompletePulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CompletePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCompletePulseCounter) < 1 {
		if m.CompletePulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.CompletePulse")
		} else {
			m.t.Errorf("Expected call to StorageMock.CompletePulse with params: %#v", *m.CompletePulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCompletePulse != nil && mm_atomic.LoadUint64(&m.afterCompletePulseCounter) < 1 {
		m.t.Error("Expected call to StorageMock.CompletePulse")
	}
}

type mStorageMockGetIncompletePulses struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetIncompletePulsesExpectation
	expectations       []*StorageMockGetIncompletePulsesExpectation
}

// StorageMockGetIncompletePulsesExpectation specifies expectation struct of the Storage.GetIncompletePulses
type StorageMockGetIncompletePulsesExpectation struct {
	mock *StorageMock

	results *StorageMockGetIncompletePulsesResults
	Counter uint64
}

// StorageMockGetIncompletePulsesResults contains results of the Storage.GetIncompletePulses
type StorageMockGetIncompletePulsesResults struct {
	pa1 []models.Pulse
	err error
}

// Expect sets up expected params for Storage.GetIncompletePulses
func (mmGetIncompletePulses *mStorageMockGetIncompletePulses) Expect() *mStorageMockGetIncompletePulses {
	if mmGetIncompletePulses.mock.funcGetIncompletePulses != nil {
		mmGetIncompletePulses.mock.t.Fatalf("StorageMock.GetIncompletePulses mock is already set by Set")
	}

	if mmGetIncompletePulses.defaultExpectation == nil {
		mmGetIncompletePulses.defaultExpectation = &StorageMockGetIncompletePulsesExpectation{}
	}

	return mmGetIncompletePulses
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetIncompletePulses
func (mmGetIncompletePulses *mStorageMockGetIncompletePulses) Inspect(f func()) *mStorageMockGetIncompletePulses {
	if mmGetIncompletePulses.mock.inspectFuncGetIncompletePulses != nil {
		mmGetIncompletePulses.mock.t.Fatalf("Inspect function is already set for StorageMock.GetIncompletePulses")
	}

	mmGetIncompletePulses.mock.inspectFuncGetIncompletePulses = f

	return mmGetIncompletePulses
}

// Return sets up results that will be returned by Storage.GetIncompletePulses
func (mmGetIncompletePulses *mStorageMockGetIncompletePulses) Return(pa1 []models.Pulse, err error) *StorageMock {
	if mmGetIncompletePulses.mock.funcGetIncompletePulses != nil {
		mmGetIncompletePulses.mock.t.Fatalf("StorageMock.GetIncompletePulses mock is already set by Set")
	}

	if mmGetIncompletePulses.defaultExpectation == nil {
		mmGetIncompletePulses.defaultExpectation = &StorageMockGetIncompletePulsesExpectation{mock: mmGetIncompletePulses.mock}
	}
	mmGetIncompletePulses.defaultExpectation.results = &StorageMockGetIncompletePulsesResults{pa1, err}
	return mmGetIncompletePulses.mock
}

//Set uses given function f to mock the Storage.GetIncompletePulses method
func (mmGetIncompletePulses *mStorageMockGetIncompletePulses) Set(f func() (pa1 []models.Pulse, err error)) *StorageMock {
	if mmGetIncompletePulses.defaultExpectation != nil {
		mmGetIncompletePulses.mock.t.Fatalf("Default expectation is already set for the Storage.GetIncompletePulses method")
	}

	if len(mmGetIncompletePulses.expectations) > 0 {
		mmGetIncompletePulses.mock.t.Fatalf("Some expectations are already set for the Storage.GetIncompletePulses method")
	}

	mmGetIncompletePulses.mock.funcGetIncompletePulses = f
	return mmGetIncompletePulses.mock
}

// GetIncompletePulses implements interfaces.Storage
func (mmGetIncompletePulses *StorageMock) GetIncompletePulses() (pa1 []models.Pulse, err error) {
	mm_atomic.AddUint64(&mmGetIncompletePulses.beforeGetIncompletePulsesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIncompletePulses.afterGetIncompletePulsesCounter, 1)

	if mmGetIncompletePulses.inspectFuncGetIncompletePulses != nil {
		mmGetIncompletePulses.inspectFuncGetIncompletePulses()
	}

	if mmGetIncompletePulses.GetIncompletePulsesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIncompletePulses.GetIncompletePulsesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIncompletePulses.GetIncompletePulsesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIncompletePulses.t.Fatal("No results are set for the StorageMock.GetIncompletePulses")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGetIncompletePulses.funcGetIncompletePulses != nil {
		return mmGetIncompletePulses.funcGetIncompletePulses()
	}
	mmGetIncompletePulses.t.Fatalf("Unexpected call to StorageMock.GetIncompletePulses.")
	return
}

// GetIncompletePulsesAfterCounter returns a count of finished StorageMock.GetIncompletePulses invocations
func (mmGetIncompletePulses *StorageMock) GetIncompletePulsesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIncompletePulses.afterGetIncompletePulsesCounter)
}

// GetIncompletePulsesBeforeCounter returns a count of StorageMock.GetIncompletePulses invocations
func (mmGetIncompletePulses *StorageMock) GetIncompletePulsesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIncompletePulses.beforeGetIncompletePulsesCounter)
}

// MinimockGetIncompletePulsesDone returns true if the count of the GetIncompletePulses invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetIncompletePulsesDone() bool {
	for _, e := range m.GetIncompletePulsesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIncompletePulsesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIncompletePulsesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIncompletePulses != nil && mm_atomic.LoadUint64(&m.afterGetIncompletePulsesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIncompletePulsesInspect logs each unmet expectation
func (m *StorageMock) MinimockGetIncompletePulsesInspect() {
	for _, e := range m.GetIncompletePulsesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StorageMock.GetIncompletePulses")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIncompletePulsesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIncompletePulsesCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetIncompletePulses")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIncompletePulses != nil && mm_atomic.LoadUint64(&m.afterGetIncompletePulsesCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetIncompletePulses")
	}
}

type mStorageMockGetJetDrops struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetJetDropsExpectation
	expectations       []*StorageMockGetJetDropsExpectation

	callArgs []*StorageMockGetJetDropsParams
	mutex    sync.RWMutex
}

// StorageMockGetJetDropsExpectation specifies expectation struct of the Storage.GetJetDrops
type StorageMockGetJetDropsExpectation struct {
	mock    *StorageMock
	params  *StorageMockGetJetDropsParams
	results *StorageMockGetJetDropsResults
	Counter uint64
}

// StorageMockGetJetDropsParams contains parameters of the Storage.GetJetDrops
type StorageMockGetJetDropsParams struct {
	pulse models.Pulse
}

// StorageMockGetJetDropsResults contains results of the Storage.GetJetDrops
type StorageMockGetJetDropsResults struct {
	ja1 []models.JetDrop
	err error
}

// Expect sets up expected params for Storage.GetJetDrops
func (mmGetJetDrops *mStorageMockGetJetDrops) Expect(pulse models.Pulse) *mStorageMockGetJetDrops {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("StorageMock.GetJetDrops mock is already set by Set")
	}

	if mmGetJetDrops.defaultExpectation == nil {
		mmGetJetDrops.defaultExpectation = &StorageMockGetJetDropsExpectation{}
	}

	mmGetJetDrops.defaultExpectation.params = &StorageMockGetJetDropsParams{pulse}
	for _, e := range mmGetJetDrops.expectations {
		if minimock.Equal(e.params, mmGetJetDrops.defaultExpectation.params) {
			mmGetJetDrops.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetJetDrops.defaultExpectation.params)
		}
	}

	return mmGetJetDrops
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetJetDrops
func (mmGetJetDrops *mStorageMockGetJetDrops) Inspect(f func(pulse models.Pulse)) *mStorageMockGetJetDrops {
	if mmGetJetDrops.mock.inspectFuncGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("Inspect function is already set for StorageMock.GetJetDrops")
	}

	mmGetJetDrops.mock.inspectFuncGetJetDrops = f

	return mmGetJetDrops
}

// Return sets up results that will be returned by Storage.GetJetDrops
func (mmGetJetDrops *mStorageMockGetJetDrops) Return(ja1 []models.JetDrop, err error) *StorageMock {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("StorageMock.GetJetDrops mock is already set by Set")
	}

	if mmGetJetDrops.defaultExpectation == nil {
		mmGetJetDrops.defaultExpectation = &StorageMockGetJetDropsExpectation{mock: mmGetJetDrops.mock}
	}
	mmGetJetDrops.defaultExpectation.results = &StorageMockGetJetDropsResults{ja1, err}
	return mmGetJetDrops.mock
}

//Set uses given function f to mock the Storage.GetJetDrops method
func (mmGetJetDrops *mStorageMockGetJetDrops) Set(f func(pulse models.Pulse) (ja1 []models.JetDrop, err error)) *StorageMock {
	if mmGetJetDrops.defaultExpectation != nil {
		mmGetJetDrops.mock.t.Fatalf("Default expectation is already set for the Storage.GetJetDrops method")
	}

	if len(mmGetJetDrops.expectations) > 0 {
		mmGetJetDrops.mock.t.Fatalf("Some expectations are already set for the Storage.GetJetDrops method")
	}

	mmGetJetDrops.mock.funcGetJetDrops = f
	return mmGetJetDrops.mock
}

// When sets expectation for the Storage.GetJetDrops which will trigger the result defined by the following
// Then helper
func (mmGetJetDrops *mStorageMockGetJetDrops) When(pulse models.Pulse) *StorageMockGetJetDropsExpectation {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("StorageMock.GetJetDrops mock is already set by Set")
	}

	expectation := &StorageMockGetJetDropsExpectation{
		mock:   mmGetJetDrops.mock,
		params: &StorageMockGetJetDropsParams{pulse},
	}
	mmGetJetDrops.expectations = append(mmGetJetDrops.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetJetDrops return parameters for the expectation previously defined by the When method
func (e *StorageMockGetJetDropsExpectation) Then(ja1 []models.JetDrop, err error) *StorageMock {
	e.results = &StorageMockGetJetDropsResults{ja1, err}
	return e.mock
}

// GetJetDrops implements interfaces.Storage
func (mmGetJetDrops *StorageMock) GetJetDrops(pulse models.Pulse) (ja1 []models.JetDrop, err error) {
	mm_atomic.AddUint64(&mmGetJetDrops.beforeGetJetDropsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetJetDrops.afterGetJetDropsCounter, 1)

	if mmGetJetDrops.inspectFuncGetJetDrops != nil {
		mmGetJetDrops.inspectFuncGetJetDrops(pulse)
	}

	mm_params := &StorageMockGetJetDropsParams{pulse}

	// Record call args
	mmGetJetDrops.GetJetDropsMock.mutex.Lock()
	mmGetJetDrops.GetJetDropsMock.callArgs = append(mmGetJetDrops.GetJetDropsMock.callArgs, mm_params)
	mmGetJetDrops.GetJetDropsMock.mutex.Unlock()

	for _, e := range mmGetJetDrops.GetJetDropsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ja1, e.results.err
		}
	}

	if mmGetJetDrops.GetJetDropsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetJetDrops.GetJetDropsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetJetDrops.GetJetDropsMock.defaultExpectation.params
		mm_got := StorageMockGetJetDropsParams{pulse}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetJetDrops.t.Errorf("StorageMock.GetJetDrops got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetJetDrops.GetJetDropsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetJetDrops.t.Fatal("No results are set for the StorageMock.GetJetDrops")
		}
		return (*mm_results).ja1, (*mm_results).err
	}
	if mmGetJetDrops.funcGetJetDrops != nil {
		return mmGetJetDrops.funcGetJetDrops(pulse)
	}
	mmGetJetDrops.t.Fatalf("Unexpected call to StorageMock.GetJetDrops. %v", pulse)
	return
}

// GetJetDropsAfterCounter returns a count of finished StorageMock.GetJetDrops invocations
func (mmGetJetDrops *StorageMock) GetJetDropsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetJetDrops.afterGetJetDropsCounter)
}

// GetJetDropsBeforeCounter returns a count of StorageMock.GetJetDrops invocations
func (mmGetJetDrops *StorageMock) GetJetDropsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetJetDrops.beforeGetJetDropsCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetJetDrops.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetJetDrops *mStorageMockGetJetDrops) Calls() []*StorageMockGetJetDropsParams {
	mmGetJetDrops.mutex.RLock()

	argCopy := make([]*StorageMockGetJetDropsParams, len(mmGetJetDrops.callArgs))
	copy(argCopy, mmGetJetDrops.callArgs)

	mmGetJetDrops.mutex.RUnlock()

	return argCopy
}

// MinimockGetJetDropsDone returns true if the count of the GetJetDrops invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetJetDropsDone() bool {
	for _, e := range m.GetJetDropsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetJetDropsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetJetDrops != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetJetDropsInspect logs each unmet expectation
func (m *StorageMock) MinimockGetJetDropsInspect() {
	for _, e := range m.GetJetDropsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetJetDrops with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetJetDropsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		if m.GetJetDropsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.GetJetDrops")
		} else {
			m.t.Errorf("Expected call to StorageMock.GetJetDrops with params: %#v", *m.GetJetDropsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetJetDrops != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetJetDrops")
	}
}

type mStorageMockGetLifeline struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetLifelineExpectation
	expectations       []*StorageMockGetLifelineExpectation

	callArgs []*StorageMockGetLifelineParams
	mutex    sync.RWMutex
}

// StorageMockGetLifelineExpectation specifies expectation struct of the Storage.GetLifeline
type StorageMockGetLifelineExpectation struct {
	mock    *StorageMock
	params  *StorageMockGetLifelineParams
	results *StorageMockGetLifelineResults
	Counter uint64
}

// StorageMockGetLifelineParams contains parameters of the Storage.GetLifeline
type StorageMockGetLifelineParams struct {
	objRef        []byte
	fromIndex     *string
	pulseNumberLt *int
	pulseNumberGt *int
	limit         int
	offset        int
	sort          string
}

// StorageMockGetLifelineResults contains results of the Storage.GetLifeline
type StorageMockGetLifelineResults struct {
	ra1 []models.Record
	i1  int
	err error
}

// Expect sets up expected params for Storage.GetLifeline
func (mmGetLifeline *mStorageMockGetLifeline) Expect(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string) *mStorageMockGetLifeline {
	if mmGetLifeline.mock.funcGetLifeline != nil {
		mmGetLifeline.mock.t.Fatalf("StorageMock.GetLifeline mock is already set by Set")
	}

	if mmGetLifeline.defaultExpectation == nil {
		mmGetLifeline.defaultExpectation = &StorageMockGetLifelineExpectation{}
	}

	mmGetLifeline.defaultExpectation.params = &StorageMockGetLifelineParams{objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort}
	for _, e := range mmGetLifeline.expectations {
		if minimock.Equal(e.params, mmGetLifeline.defaultExpectation.params) {
			mmGetLifeline.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetLifeline.defaultExpectation.params)
		}
	}

	return mmGetLifeline
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetLifeline
func (mmGetLifeline *mStorageMockGetLifeline) Inspect(f func(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string)) *mStorageMockGetLifeline {
	if mmGetLifeline.mock.inspectFuncGetLifeline != nil {
		mmGetLifeline.mock.t.Fatalf("Inspect function is already set for StorageMock.GetLifeline")
	}

	mmGetLifeline.mock.inspectFuncGetLifeline = f

	return mmGetLifeline
}

// Return sets up results that will be returned by Storage.GetLifeline
func (mmGetLifeline *mStorageMockGetLifeline) Return(ra1 []models.Record, i1 int, err error) *StorageMock {
	if mmGetLifeline.mock.funcGetLifeline != nil {
		mmGetLifeline.mock.t.Fatalf("StorageMock.GetLifeline mock is already set by Set")
	}

	if mmGetLifeline.defaultExpectation == nil {
		mmGetLifeline.defaultExpectation = &StorageMockGetLifelineExpectation{mock: mmGetLifeline.mock}
	}
	mmGetLifeline.defaultExpectation.results = &StorageMockGetLifelineResults{ra1, i1, err}
	return mmGetLifeline.mock
}

//Set uses given function f to mock the Storage.GetLifeline method
func (mmGetLifeline *mStorageMockGetLifeline) Set(f func(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string) (ra1 []models.Record, i1 int, err error)) *StorageMock {
	if mmGetLifeline.defaultExpectation != nil {
		mmGetLifeline.mock.t.Fatalf("Default expectation is already set for the Storage.GetLifeline method")
	}

	if len(mmGetLifeline.expectations) > 0 {
		mmGetLifeline.mock.t.Fatalf("Some expectations are already set for the Storage.GetLifeline method")
	}

	mmGetLifeline.mock.funcGetLifeline = f
	return mmGetLifeline.mock
}

// When sets expectation for the Storage.GetLifeline which will trigger the result defined by the following
// Then helper
func (mmGetLifeline *mStorageMockGetLifeline) When(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string) *StorageMockGetLifelineExpectation {
	if mmGetLifeline.mock.funcGetLifeline != nil {
		mmGetLifeline.mock.t.Fatalf("StorageMock.GetLifeline mock is already set by Set")
	}

	expectation := &StorageMockGetLifelineExpectation{
		mock:   mmGetLifeline.mock,
		params: &StorageMockGetLifelineParams{objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort},
	}
	mmGetLifeline.expectations = append(mmGetLifeline.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetLifeline return parameters for the expectation previously defined by the When method
func (e *StorageMockGetLifelineExpectation) Then(ra1 []models.Record, i1 int, err error) *StorageMock {
	e.results = &StorageMockGetLifelineResults{ra1, i1, err}
	return e.mock
}

// GetLifeline implements interfaces.Storage
func (mmGetLifeline *StorageMock) GetLifeline(objRef []byte, fromIndex *string, pulseNumberLt *int, pulseNumberGt *int, limit int, offset int, sort string) (ra1 []models.Record, i1 int, err error) {
	mm_atomic.AddUint64(&mmGetLifeline.beforeGetLifelineCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLifeline.afterGetLifelineCounter, 1)

	if mmGetLifeline.inspectFuncGetLifeline != nil {
		mmGetLifeline.inspectFuncGetLifeline(objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort)
	}

	mm_params := &StorageMockGetLifelineParams{objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort}

	// Record call args
	mmGetLifeline.GetLifelineMock.mutex.Lock()
	mmGetLifeline.GetLifelineMock.callArgs = append(mmGetLifeline.GetLifelineMock.callArgs, mm_params)
	mmGetLifeline.GetLifelineMock.mutex.Unlock()

	for _, e := range mmGetLifeline.GetLifelineMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1, e.results.i1, e.results.err
		}
	}

	if mmGetLifeline.GetLifelineMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLifeline.GetLifelineMock.defaultExpectation.Counter, 1)
		mm_want := mmGetLifeline.GetLifelineMock.defaultExpectation.params
		mm_got := StorageMockGetLifelineParams{objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetLifeline.t.Errorf("StorageMock.GetLifeline got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetLifeline.GetLifelineMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLifeline.t.Fatal("No results are set for the StorageMock.GetLifeline")
		}
		return (*mm_results).ra1, (*mm_results).i1, (*mm_results).err
	}
	if mmGetLifeline.funcGetLifeline != nil {
		return mmGetLifeline.funcGetLifeline(objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort)
	}
	mmGetLifeline.t.Fatalf("Unexpected call to StorageMock.GetLifeline. %v %v %v %v %v %v %v", objRef, fromIndex, pulseNumberLt, pulseNumberGt, limit, offset, sort)
	return
}

// GetLifelineAfterCounter returns a count of finished StorageMock.GetLifeline invocations
func (mmGetLifeline *StorageMock) GetLifelineAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLifeline.afterGetLifelineCounter)
}

// GetLifelineBeforeCounter returns a count of StorageMock.GetLifeline invocations
func (mmGetLifeline *StorageMock) GetLifelineBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLifeline.beforeGetLifelineCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetLifeline.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetLifeline *mStorageMockGetLifeline) Calls() []*StorageMockGetLifelineParams {
	mmGetLifeline.mutex.RLock()

	argCopy := make([]*StorageMockGetLifelineParams, len(mmGetLifeline.callArgs))
	copy(argCopy, mmGetLifeline.callArgs)

	mmGetLifeline.mutex.RUnlock()

	return argCopy
}

// MinimockGetLifelineDone returns true if the count of the GetLifeline invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetLifelineDone() bool {
	for _, e := range m.GetLifelineMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLifelineMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLifelineCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLifeline != nil && mm_atomic.LoadUint64(&m.afterGetLifelineCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLifelineInspect logs each unmet expectation
func (m *StorageMock) MinimockGetLifelineInspect() {
	for _, e := range m.GetLifelineMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetLifeline with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLifelineMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLifelineCounter) < 1 {
		if m.GetLifelineMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.GetLifeline")
		} else {
			m.t.Errorf("Expected call to StorageMock.GetLifeline with params: %#v", *m.GetLifelineMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLifeline != nil && mm_atomic.LoadUint64(&m.afterGetLifelineCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetLifeline")
	}
}

type mStorageMockGetRecord struct {
	mock               *StorageMock
	defaultExpectation *StorageMockGetRecordExpectation
	expectations       []*StorageMockGetRecordExpectation

	callArgs []*StorageMockGetRecordParams
	mutex    sync.RWMutex
}

// StorageMockGetRecordExpectation specifies expectation struct of the Storage.GetRecord
type StorageMockGetRecordExpectation struct {
	mock    *StorageMock
	params  *StorageMockGetRecordParams
	results *StorageMockGetRecordResults
	Counter uint64
}

// StorageMockGetRecordParams contains parameters of the Storage.GetRecord
type StorageMockGetRecordParams struct {
	ref models.Reference
}

// StorageMockGetRecordResults contains results of the Storage.GetRecord
type StorageMockGetRecordResults struct {
	r1  models.Record
	err error
}

// Expect sets up expected params for Storage.GetRecord
func (mmGetRecord *mStorageMockGetRecord) Expect(ref models.Reference) *mStorageMockGetRecord {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("StorageMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &StorageMockGetRecordExpectation{}
	}

	mmGetRecord.defaultExpectation.params = &StorageMockGetRecordParams{ref}
	for _, e := range mmGetRecord.expectations {
		if minimock.Equal(e.params, mmGetRecord.defaultExpectation.params) {
			mmGetRecord.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRecord.defaultExpectation.params)
		}
	}

	return mmGetRecord
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetRecord
func (mmGetRecord *mStorageMockGetRecord) Inspect(f func(ref models.Reference)) *mStorageMockGetRecord {
	if mmGetRecord.mock.inspectFuncGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("Inspect function is already set for StorageMock.GetRecord")
	}

	mmGetRecord.mock.inspectFuncGetRecord = f

	return mmGetRecord
}

// Return sets up results that will be returned by Storage.GetRecord
func (mmGetRecord *mStorageMockGetRecord) Return(r1 models.Record, err error) *StorageMock {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("StorageMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &StorageMockGetRecordExpectation{mock: mmGetRecord.mock}
	}
	mmGetRecord.defaultExpectation.results = &StorageMockGetRecordResults{r1, err}
	return mmGetRecord.mock
}

//Set uses given function f to mock the Storage.GetRecord method
func (mmGetRecord *mStorageMockGetRecord) Set(f func(ref models.Reference) (r1 models.Record, err error)) *StorageMock {
	if mmGetRecord.defaultExpectation != nil {
		mmGetRecord.mock.t.Fatalf("Default expectation is already set for the Storage.GetRecord method")
	}

	if len(mmGetRecord.expectations) > 0 {
		mmGetRecord.mock.t.Fatalf("Some expectations are already set for the Storage.GetRecord method")
	}

	mmGetRecord.mock.funcGetRecord = f
	return mmGetRecord.mock
}

// When sets expectation for the Storage.GetRecord which will trigger the result defined by the following
// Then helper
func (mmGetRecord *mStorageMockGetRecord) When(ref models.Reference) *StorageMockGetRecordExpectation {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("StorageMock.GetRecord mock is already set by Set")
	}

	expectation := &StorageMockGetRecordExpectation{
		mock:   mmGetRecord.mock,
		params: &StorageMockGetRecordParams{ref},
	}
	mmGetRecord.expectations = append(mmGetRecord.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetRecord return parameters for the expectation previously defined by the When method
func (e *StorageMockGetRecordExpectation) Then(r1 models.Record, err error) *StorageMock {
	e.results = &StorageMockGetRecordResults{r1, err}
	return e.mock
}

// GetRecord implements interfaces.Storage
func (mmGetRecord *StorageMock) GetRecord(ref models.Reference) (r1 models.Record, err error) {
	mm_atomic.AddUint64(&mmGetRecord.beforeGetRecordCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRecord.afterGetRecordCounter, 1)

	if mmGetRecord.inspectFuncGetRecord != nil {
		mmGetRecord.inspectFuncGetRecord(ref)
	}

	mm_params := &StorageMockGetRecordParams{ref}

	// Record call args
	mmGetRecord.GetRecordMock.mutex.Lock()
	mmGetRecord.GetRecordMock.callArgs = append(mmGetRecord.GetRecordMock.callArgs, mm_params)
	mmGetRecord.GetRecordMock.mutex.Unlock()

	for _, e := range mmGetRecord.GetRecordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmGetRecord.GetRecordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRecord.GetRecordMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRecord.GetRecordMock.defaultExpectation.params
		mm_got := StorageMockGetRecordParams{ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRecord.t.Errorf("StorageMock.GetRecord got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRecord.GetRecordMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRecord.t.Fatal("No results are set for the StorageMock.GetRecord")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmGetRecord.funcGetRecord != nil {
		return mmGetRecord.funcGetRecord(ref)
	}
	mmGetRecord.t.Fatalf("Unexpected call to StorageMock.GetRecord. %v", ref)
	return
}

// GetRecordAfterCounter returns a count of finished StorageMock.GetRecord invocations
func (mmGetRecord *StorageMock) GetRecordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecord.afterGetRecordCounter)
}

// GetRecordBeforeCounter returns a count of StorageMock.GetRecord invocations
func (mmGetRecord *StorageMock) GetRecordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecord.beforeGetRecordCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetRecord.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRecord *mStorageMockGetRecord) Calls() []*StorageMockGetRecordParams {
	mmGetRecord.mutex.RLock()

	argCopy := make([]*StorageMockGetRecordParams, len(mmGetRecord.callArgs))
	copy(argCopy, mmGetRecord.callArgs)

	mmGetRecord.mutex.RUnlock()

	return argCopy
}

// MinimockGetRecordDone returns true if the count of the GetRecord invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetRecordDone() bool {
	for _, e := range m.GetRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecord != nil && mm_atomic.LoadUint64(&m.afterGetRecordCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRecordInspect logs each unmet expectation
func (m *StorageMock) MinimockGetRecordInspect() {
	for _, e := range m.GetRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetRecord with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordCounter) < 1 {
		if m.GetRecordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.GetRecord")
		} else {
			m.t.Errorf("Expected call to StorageMock.GetRecord with params: %#v", *m.GetRecordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecord != nil && mm_atomic.LoadUint64(&m.afterGetRecordCounter) < 1 {
		m.t.Error("Expected call to StorageMock.GetRecord")
	}
}

type mStorageMockSaveJetDropData struct {
	mock               *StorageMock
	defaultExpectation *StorageMockSaveJetDropDataExpectation
	expectations       []*StorageMockSaveJetDropDataExpectation

	callArgs []*StorageMockSaveJetDropDataParams
	mutex    sync.RWMutex
}

// StorageMockSaveJetDropDataExpectation specifies expectation struct of the Storage.SaveJetDropData
type StorageMockSaveJetDropDataExpectation struct {
	mock    *StorageMock
	params  *StorageMockSaveJetDropDataParams
	results *StorageMockSaveJetDropDataResults
	Counter uint64
}

// StorageMockSaveJetDropDataParams contains parameters of the Storage.SaveJetDropData
type StorageMockSaveJetDropDataParams struct {
	jetDrop models.JetDrop
	records []models.Record
}

// StorageMockSaveJetDropDataResults contains results of the Storage.SaveJetDropData
type StorageMockSaveJetDropDataResults struct {
	err error
}

// Expect sets up expected params for Storage.SaveJetDropData
func (mmSaveJetDropData *mStorageMockSaveJetDropData) Expect(jetDrop models.JetDrop, records []models.Record) *mStorageMockSaveJetDropData {
	if mmSaveJetDropData.mock.funcSaveJetDropData != nil {
		mmSaveJetDropData.mock.t.Fatalf("StorageMock.SaveJetDropData mock is already set by Set")
	}

	if mmSaveJetDropData.defaultExpectation == nil {
		mmSaveJetDropData.defaultExpectation = &StorageMockSaveJetDropDataExpectation{}
	}

	mmSaveJetDropData.defaultExpectation.params = &StorageMockSaveJetDropDataParams{jetDrop, records}
	for _, e := range mmSaveJetDropData.expectations {
		if minimock.Equal(e.params, mmSaveJetDropData.defaultExpectation.params) {
			mmSaveJetDropData.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveJetDropData.defaultExpectation.params)
		}
	}

	return mmSaveJetDropData
}

// Inspect accepts an inspector function that has same arguments as the Storage.SaveJetDropData
func (mmSaveJetDropData *mStorageMockSaveJetDropData) Inspect(f func(jetDrop models.JetDrop, records []models.Record)) *mStorageMockSaveJetDropData {
	if mmSaveJetDropData.mock.inspectFuncSaveJetDropData != nil {
		mmSaveJetDropData.mock.t.Fatalf("Inspect function is already set for StorageMock.SaveJetDropData")
	}

	mmSaveJetDropData.mock.inspectFuncSaveJetDropData = f

	return mmSaveJetDropData
}

// Return sets up results that will be returned by Storage.SaveJetDropData
func (mmSaveJetDropData *mStorageMockSaveJetDropData) Return(err error) *StorageMock {
	if mmSaveJetDropData.mock.funcSaveJetDropData != nil {
		mmSaveJetDropData.mock.t.Fatalf("StorageMock.SaveJetDropData mock is already set by Set")
	}

	if mmSaveJetDropData.defaultExpectation == nil {
		mmSaveJetDropData.defaultExpectation = &StorageMockSaveJetDropDataExpectation{mock: mmSaveJetDropData.mock}
	}
	mmSaveJetDropData.defaultExpectation.results = &StorageMockSaveJetDropDataResults{err}
	return mmSaveJetDropData.mock
}

//Set uses given function f to mock the Storage.SaveJetDropData method
func (mmSaveJetDropData *mStorageMockSaveJetDropData) Set(f func(jetDrop models.JetDrop, records []models.Record) (err error)) *StorageMock {
	if mmSaveJetDropData.defaultExpectation != nil {
		mmSaveJetDropData.mock.t.Fatalf("Default expectation is already set for the Storage.SaveJetDropData method")
	}

	if len(mmSaveJetDropData.expectations) > 0 {
		mmSaveJetDropData.mock.t.Fatalf("Some expectations are already set for the Storage.SaveJetDropData method")
	}

	mmSaveJetDropData.mock.funcSaveJetDropData = f
	return mmSaveJetDropData.mock
}

// When sets expectation for the Storage.SaveJetDropData which will trigger the result defined by the following
// Then helper
func (mmSaveJetDropData *mStorageMockSaveJetDropData) When(jetDrop models.JetDrop, records []models.Record) *StorageMockSaveJetDropDataExpectation {
	if mmSaveJetDropData.mock.funcSaveJetDropData != nil {
		mmSaveJetDropData.mock.t.Fatalf("StorageMock.SaveJetDropData mock is already set by Set")
	}

	expectation := &StorageMockSaveJetDropDataExpectation{
		mock:   mmSaveJetDropData.mock,
		params: &StorageMockSaveJetDropDataParams{jetDrop, records},
	}
	mmSaveJetDropData.expectations = append(mmSaveJetDropData.expectations, expectation)
	return expectation
}

// Then sets up Storage.SaveJetDropData return parameters for the expectation previously defined by the When method
func (e *StorageMockSaveJetDropDataExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockSaveJetDropDataResults{err}
	return e.mock
}

// SaveJetDropData implements interfaces.Storage
func (mmSaveJetDropData *StorageMock) SaveJetDropData(jetDrop models.JetDrop, records []models.Record) (err error) {
	mm_atomic.AddUint64(&mmSaveJetDropData.beforeSaveJetDropDataCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveJetDropData.afterSaveJetDropDataCounter, 1)

	if mmSaveJetDropData.inspectFuncSaveJetDropData != nil {
		mmSaveJetDropData.inspectFuncSaveJetDropData(jetDrop, records)
	}

	mm_params := &StorageMockSaveJetDropDataParams{jetDrop, records}

	// Record call args
	mmSaveJetDropData.SaveJetDropDataMock.mutex.Lock()
	mmSaveJetDropData.SaveJetDropDataMock.callArgs = append(mmSaveJetDropData.SaveJetDropDataMock.callArgs, mm_params)
	mmSaveJetDropData.SaveJetDropDataMock.mutex.Unlock()

	for _, e := range mmSaveJetDropData.SaveJetDropDataMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveJetDropData.SaveJetDropDataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveJetDropData.SaveJetDropDataMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveJetDropData.SaveJetDropDataMock.defaultExpectation.params
		mm_got := StorageMockSaveJetDropDataParams{jetDrop, records}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveJetDropData.t.Errorf("StorageMock.SaveJetDropData got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveJetDropData.SaveJetDropDataMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveJetDropData.t.Fatal("No results are set for the StorageMock.SaveJetDropData")
		}
		return (*mm_results).err
	}
	if mmSaveJetDropData.funcSaveJetDropData != nil {
		return mmSaveJetDropData.funcSaveJetDropData(jetDrop, records)
	}
	mmSaveJetDropData.t.Fatalf("Unexpected call to StorageMock.SaveJetDropData. %v %v", jetDrop, records)
	return
}

// SaveJetDropDataAfterCounter returns a count of finished StorageMock.SaveJetDropData invocations
func (mmSaveJetDropData *StorageMock) SaveJetDropDataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveJetDropData.afterSaveJetDropDataCounter)
}

// SaveJetDropDataBeforeCounter returns a count of StorageMock.SaveJetDropData invocations
func (mmSaveJetDropData *StorageMock) SaveJetDropDataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveJetDropData.beforeSaveJetDropDataCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.SaveJetDropData.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveJetDropData *mStorageMockSaveJetDropData) Calls() []*StorageMockSaveJetDropDataParams {
	mmSaveJetDropData.mutex.RLock()

	argCopy := make([]*StorageMockSaveJetDropDataParams, len(mmSaveJetDropData.callArgs))
	copy(argCopy, mmSaveJetDropData.callArgs)

	mmSaveJetDropData.mutex.RUnlock()

	return argCopy
}

// MinimockSaveJetDropDataDone returns true if the count of the SaveJetDropData invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockSaveJetDropDataDone() bool {
	for _, e := range m.SaveJetDropDataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveJetDropDataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveJetDropDataCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveJetDropData != nil && mm_atomic.LoadUint64(&m.afterSaveJetDropDataCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveJetDropDataInspect logs each unmet expectation
func (m *StorageMock) MinimockSaveJetDropDataInspect() {
	for _, e := range m.SaveJetDropDataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.SaveJetDropData with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveJetDropDataMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveJetDropDataCounter) < 1 {
		if m.SaveJetDropDataMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.SaveJetDropData")
		} else {
			m.t.Errorf("Expected call to StorageMock.SaveJetDropData with params: %#v", *m.SaveJetDropDataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveJetDropData != nil && mm_atomic.LoadUint64(&m.afterSaveJetDropDataCounter) < 1 {
		m.t.Error("Expected call to StorageMock.SaveJetDropData")
	}
}

type mStorageMockSavePulse struct {
	mock               *StorageMock
	defaultExpectation *StorageMockSavePulseExpectation
	expectations       []*StorageMockSavePulseExpectation

	callArgs []*StorageMockSavePulseParams
	mutex    sync.RWMutex
}

// StorageMockSavePulseExpectation specifies expectation struct of the Storage.SavePulse
type StorageMockSavePulseExpectation struct {
	mock    *StorageMock
	params  *StorageMockSavePulseParams
	results *StorageMockSavePulseResults
	Counter uint64
}

// StorageMockSavePulseParams contains parameters of the Storage.SavePulse
type StorageMockSavePulseParams struct {
	pulse models.Pulse
}

// StorageMockSavePulseResults contains results of the Storage.SavePulse
type StorageMockSavePulseResults struct {
	err error
}

// Expect sets up expected params for Storage.SavePulse
func (mmSavePulse *mStorageMockSavePulse) Expect(pulse models.Pulse) *mStorageMockSavePulse {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("StorageMock.SavePulse mock is already set by Set")
	}

	if mmSavePulse.defaultExpectation == nil {
		mmSavePulse.defaultExpectation = &StorageMockSavePulseExpectation{}
	}

	mmSavePulse.defaultExpectation.params = &StorageMockSavePulseParams{pulse}
	for _, e := range mmSavePulse.expectations {
		if minimock.Equal(e.params, mmSavePulse.defaultExpectation.params) {
			mmSavePulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSavePulse.defaultExpectation.params)
		}
	}

	return mmSavePulse
}

// Inspect accepts an inspector function that has same arguments as the Storage.SavePulse
func (mmSavePulse *mStorageMockSavePulse) Inspect(f func(pulse models.Pulse)) *mStorageMockSavePulse {
	if mmSavePulse.mock.inspectFuncSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("Inspect function is already set for StorageMock.SavePulse")
	}

	mmSavePulse.mock.inspectFuncSavePulse = f

	return mmSavePulse
}

// Return sets up results that will be returned by Storage.SavePulse
func (mmSavePulse *mStorageMockSavePulse) Return(err error) *StorageMock {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("StorageMock.SavePulse mock is already set by Set")
	}

	if mmSavePulse.defaultExpectation == nil {
		mmSavePulse.defaultExpectation = &StorageMockSavePulseExpectation{mock: mmSavePulse.mock}
	}
	mmSavePulse.defaultExpectation.results = &StorageMockSavePulseResults{err}
	return mmSavePulse.mock
}

//Set uses given function f to mock the Storage.SavePulse method
func (mmSavePulse *mStorageMockSavePulse) Set(f func(pulse models.Pulse) (err error)) *StorageMock {
	if mmSavePulse.defaultExpectation != nil {
		mmSavePulse.mock.t.Fatalf("Default expectation is already set for the Storage.SavePulse method")
	}

	if len(mmSavePulse.expectations) > 0 {
		mmSavePulse.mock.t.Fatalf("Some expectations are already set for the Storage.SavePulse method")
	}

	mmSavePulse.mock.funcSavePulse = f
	return mmSavePulse.mock
}

// When sets expectation for the Storage.SavePulse which will trigger the result defined by the following
// Then helper
func (mmSavePulse *mStorageMockSavePulse) When(pulse models.Pulse) *StorageMockSavePulseExpectation {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("StorageMock.SavePulse mock is already set by Set")
	}

	expectation := &StorageMockSavePulseExpectation{
		mock:   mmSavePulse.mock,
		params: &StorageMockSavePulseParams{pulse},
	}
	mmSavePulse.expectations = append(mmSavePulse.expectations, expectation)
	return expectation
}

// Then sets up Storage.SavePulse return parameters for the expectation previously defined by the When method
func (e *StorageMockSavePulseExpectation) Then(err error) *StorageMock {
	e.results = &StorageMockSavePulseResults{err}
	return e.mock
}

// SavePulse implements interfaces.Storage
func (mmSavePulse *StorageMock) SavePulse(pulse models.Pulse) (err error) {
	mm_atomic.AddUint64(&mmSavePulse.beforeSavePulseCounter, 1)
	defer mm_atomic.AddUint64(&mmSavePulse.afterSavePulseCounter, 1)

	if mmSavePulse.inspectFuncSavePulse != nil {
		mmSavePulse.inspectFuncSavePulse(pulse)
	}

	mm_params := &StorageMockSavePulseParams{pulse}

	// Record call args
	mmSavePulse.SavePulseMock.mutex.Lock()
	mmSavePulse.SavePulseMock.callArgs = append(mmSavePulse.SavePulseMock.callArgs, mm_params)
	mmSavePulse.SavePulseMock.mutex.Unlock()

	for _, e := range mmSavePulse.SavePulseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSavePulse.SavePulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSavePulse.SavePulseMock.defaultExpectation.Counter, 1)
		mm_want := mmSavePulse.SavePulseMock.defaultExpectation.params
		mm_got := StorageMockSavePulseParams{pulse}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSavePulse.t.Errorf("StorageMock.SavePulse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSavePulse.SavePulseMock.defaultExpectation.results
		if mm_results == nil {
			mmSavePulse.t.Fatal("No results are set for the StorageMock.SavePulse")
		}
		return (*mm_results).err
	}
	if mmSavePulse.funcSavePulse != nil {
		return mmSavePulse.funcSavePulse(pulse)
	}
	mmSavePulse.t.Fatalf("Unexpected call to StorageMock.SavePulse. %v", pulse)
	return
}

// SavePulseAfterCounter returns a count of finished StorageMock.SavePulse invocations
func (mmSavePulse *StorageMock) SavePulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSavePulse.afterSavePulseCounter)
}

// SavePulseBeforeCounter returns a count of StorageMock.SavePulse invocations
func (mmSavePulse *StorageMock) SavePulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSavePulse.beforeSavePulseCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.SavePulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSavePulse *mStorageMockSavePulse) Calls() []*StorageMockSavePulseParams {
	mmSavePulse.mutex.RLock()

	argCopy := make([]*StorageMockSavePulseParams, len(mmSavePulse.callArgs))
	copy(argCopy, mmSavePulse.callArgs)

	mmSavePulse.mutex.RUnlock()

	return argCopy
}

// MinimockSavePulseDone returns true if the count of the SavePulse invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockSavePulseDone() bool {
	for _, e := range m.SavePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SavePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSavePulse != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockSavePulseInspect logs each unmet expectation
func (m *StorageMock) MinimockSavePulseInspect() {
	for _, e := range m.SavePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.SavePulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SavePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		if m.SavePulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.SavePulse")
		} else {
			m.t.Errorf("Expected call to StorageMock.SavePulse with params: %#v", *m.SavePulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSavePulse != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		m.t.Error("Expected call to StorageMock.SavePulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCompletePulseInspect()

		m.MinimockGetIncompletePulsesInspect()

		m.MinimockGetJetDropsInspect()

		m.MinimockGetLifelineInspect()

		m.MinimockGetRecordInspect()

		m.MinimockSaveJetDropDataInspect()

		m.MinimockSavePulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCompletePulseDone() &&
		m.MinimockGetIncompletePulsesDone() &&
		m.MinimockGetJetDropsDone() &&
		m.MinimockGetLifelineDone() &&
		m.MinimockGetRecordDone() &&
		m.MinimockSaveJetDropDataDone() &&
		m.MinimockSavePulseDone()
}
