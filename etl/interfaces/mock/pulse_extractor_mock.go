package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/ledger/heavy/exporter"
)

// PulseExtractorMock implements interfaces.PulseExtractor
type PulseExtractorMock struct {
	t minimock.Tester

	funcGetCurrentPulse          func(ctx context.Context) (u1 uint32, err error)
	inspectFuncGetCurrentPulse   func(ctx context.Context)
	afterGetCurrentPulseCounter  uint64
	beforeGetCurrentPulseCounter uint64
	GetCurrentPulseMock          mPulseExtractorMockGetCurrentPulse

	funcGetNextFinalizedPulse          func(ctx context.Context, p int64) (fp1 *exporter.FullPulse, err error)
	inspectFuncGetNextFinalizedPulse   func(ctx context.Context, p int64)
	afterGetNextFinalizedPulseCounter  uint64
	beforeGetNextFinalizedPulseCounter uint64
	GetNextFinalizedPulseMock          mPulseExtractorMockGetNextFinalizedPulse
}

// NewPulseExtractorMock returns a mock for interfaces.PulseExtractor
func NewPulseExtractorMock(t minimock.Tester) *PulseExtractorMock {
	m := &PulseExtractorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCurrentPulseMock = mPulseExtractorMockGetCurrentPulse{mock: m}
	m.GetCurrentPulseMock.callArgs = []*PulseExtractorMockGetCurrentPulseParams{}

	m.GetNextFinalizedPulseMock = mPulseExtractorMockGetNextFinalizedPulse{mock: m}
	m.GetNextFinalizedPulseMock.callArgs = []*PulseExtractorMockGetNextFinalizedPulseParams{}

	return m
}

type mPulseExtractorMockGetCurrentPulse struct {
	mock               *PulseExtractorMock
	defaultExpectation *PulseExtractorMockGetCurrentPulseExpectation
	expectations       []*PulseExtractorMockGetCurrentPulseExpectation

	callArgs []*PulseExtractorMockGetCurrentPulseParams
	mutex    sync.RWMutex
}

// PulseExtractorMockGetCurrentPulseExpectation specifies expectation struct of the PulseExtractor.GetCurrentPulse
type PulseExtractorMockGetCurrentPulseExpectation struct {
	mock    *PulseExtractorMock
	params  *PulseExtractorMockGetCurrentPulseParams
	results *PulseExtractorMockGetCurrentPulseResults
	Counter uint64
}

// PulseExtractorMockGetCurrentPulseParams contains parameters of the PulseExtractor.GetCurrentPulse
type PulseExtractorMockGetCurrentPulseParams struct {
	ctx context.Context
}

// PulseExtractorMockGetCurrentPulseResults contains results of the PulseExtractor.GetCurrentPulse
type PulseExtractorMockGetCurrentPulseResults struct {
	u1  uint32
	err error
}

// Expect sets up expected params for PulseExtractor.GetCurrentPulse
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) Expect(ctx context.Context) *mPulseExtractorMockGetCurrentPulse {
	if mmGetCurrentPulse.mock.funcGetCurrentPulse != nil {
		mmGetCurrentPulse.mock.t.Fatalf("PulseExtractorMock.GetCurrentPulse mock is already set by Set")
	}

	if mmGetCurrentPulse.defaultExpectation == nil {
		mmGetCurrentPulse.defaultExpectation = &PulseExtractorMockGetCurrentPulseExpectation{}
	}

	mmGetCurrentPulse.defaultExpectation.params = &PulseExtractorMockGetCurrentPulseParams{ctx}
	for _, e := range mmGetCurrentPulse.expectations {
		if minimock.Equal(e.params, mmGetCurrentPulse.defaultExpectation.params) {
			mmGetCurrentPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCurrentPulse.defaultExpectation.params)
		}
	}

	return mmGetCurrentPulse
}

// Inspect accepts an inspector function that has same arguments as the PulseExtractor.GetCurrentPulse
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) Inspect(f func(ctx context.Context)) *mPulseExtractorMockGetCurrentPulse {
	if mmGetCurrentPulse.mock.inspectFuncGetCurrentPulse != nil {
		mmGetCurrentPulse.mock.t.Fatalf("Inspect function is already set for PulseExtractorMock.GetCurrentPulse")
	}

	mmGetCurrentPulse.mock.inspectFuncGetCurrentPulse = f

	return mmGetCurrentPulse
}

// Return sets up results that will be returned by PulseExtractor.GetCurrentPulse
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) Return(u1 uint32, err error) *PulseExtractorMock {
	if mmGetCurrentPulse.mock.funcGetCurrentPulse != nil {
		mmGetCurrentPulse.mock.t.Fatalf("PulseExtractorMock.GetCurrentPulse mock is already set by Set")
	}

	if mmGetCurrentPulse.defaultExpectation == nil {
		mmGetCurrentPulse.defaultExpectation = &PulseExtractorMockGetCurrentPulseExpectation{mock: mmGetCurrentPulse.mock}
	}
	mmGetCurrentPulse.defaultExpectation.results = &PulseExtractorMockGetCurrentPulseResults{u1, err}
	return mmGetCurrentPulse.mock
}

//Set uses given function f to mock the PulseExtractor.GetCurrentPulse method
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) Set(f func(ctx context.Context) (u1 uint32, err error)) *PulseExtractorMock {
	if mmGetCurrentPulse.defaultExpectation != nil {
		mmGetCurrentPulse.mock.t.Fatalf("Default expectation is already set for the PulseExtractor.GetCurrentPulse method")
	}

	if len(mmGetCurrentPulse.expectations) > 0 {
		mmGetCurrentPulse.mock.t.Fatalf("Some expectations are already set for the PulseExtractor.GetCurrentPulse method")
	}

	mmGetCurrentPulse.mock.funcGetCurrentPulse = f
	return mmGetCurrentPulse.mock
}

// When sets expectation for the PulseExtractor.GetCurrentPulse which will trigger the result defined by the following
// Then helper
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) When(ctx context.Context) *PulseExtractorMockGetCurrentPulseExpectation {
	if mmGetCurrentPulse.mock.funcGetCurrentPulse != nil {
		mmGetCurrentPulse.mock.t.Fatalf("PulseExtractorMock.GetCurrentPulse mock is already set by Set")
	}

	expectation := &PulseExtractorMockGetCurrentPulseExpectation{
		mock:   mmGetCurrentPulse.mock,
		params: &PulseExtractorMockGetCurrentPulseParams{ctx},
	}
	mmGetCurrentPulse.expectations = append(mmGetCurrentPulse.expectations, expectation)
	return expectation
}

// Then sets up PulseExtractor.GetCurrentPulse return parameters for the expectation previously defined by the When method
func (e *PulseExtractorMockGetCurrentPulseExpectation) Then(u1 uint32, err error) *PulseExtractorMock {
	e.results = &PulseExtractorMockGetCurrentPulseResults{u1, err}
	return e.mock
}

// GetCurrentPulse implements interfaces.PulseExtractor
func (mmGetCurrentPulse *PulseExtractorMock) GetCurrentPulse(ctx context.Context) (u1 uint32, err error) {
	mm_atomic.AddUint64(&mmGetCurrentPulse.beforeGetCurrentPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCurrentPulse.afterGetCurrentPulseCounter, 1)

	if mmGetCurrentPulse.inspectFuncGetCurrentPulse != nil {
		mmGetCurrentPulse.inspectFuncGetCurrentPulse(ctx)
	}

	mm_params := &PulseExtractorMockGetCurrentPulseParams{ctx}

	// Record call args
	mmGetCurrentPulse.GetCurrentPulseMock.mutex.Lock()
	mmGetCurrentPulse.GetCurrentPulseMock.callArgs = append(mmGetCurrentPulse.GetCurrentPulseMock.callArgs, mm_params)
	mmGetCurrentPulse.GetCurrentPulseMock.mutex.Unlock()

	for _, e := range mmGetCurrentPulse.GetCurrentPulseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetCurrentPulse.GetCurrentPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCurrentPulse.GetCurrentPulseMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCurrentPulse.GetCurrentPulseMock.defaultExpectation.params
		mm_got := PulseExtractorMockGetCurrentPulseParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCurrentPulse.t.Errorf("PulseExtractorMock.GetCurrentPulse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCurrentPulse.GetCurrentPulseMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCurrentPulse.t.Fatal("No results are set for the PulseExtractorMock.GetCurrentPulse")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetCurrentPulse.funcGetCurrentPulse != nil {
		return mmGetCurrentPulse.funcGetCurrentPulse(ctx)
	}
	mmGetCurrentPulse.t.Fatalf("Unexpected call to PulseExtractorMock.GetCurrentPulse. %v", ctx)
	return
}

// GetCurrentPulseAfterCounter returns a count of finished PulseExtractorMock.GetCurrentPulse invocations
func (mmGetCurrentPulse *PulseExtractorMock) GetCurrentPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentPulse.afterGetCurrentPulseCounter)
}

// GetCurrentPulseBeforeCounter returns a count of PulseExtractorMock.GetCurrentPulse invocations
func (mmGetCurrentPulse *PulseExtractorMock) GetCurrentPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentPulse.beforeGetCurrentPulseCounter)
}

// Calls returns a list of arguments used in each call to PulseExtractorMock.GetCurrentPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCurrentPulse *mPulseExtractorMockGetCurrentPulse) Calls() []*PulseExtractorMockGetCurrentPulseParams {
	mmGetCurrentPulse.mutex.RLock()

	argCopy := make([]*PulseExtractorMockGetCurrentPulseParams, len(mmGetCurrentPulse.callArgs))
	copy(argCopy, mmGetCurrentPulse.callArgs)

	mmGetCurrentPulse.mutex.RUnlock()

	return argCopy
}

// MinimockGetCurrentPulseDone returns true if the count of the GetCurrentPulse invocations corresponds
// the number of defined expectations
func (m *PulseExtractorMock) MinimockGetCurrentPulseDone() bool {
	for _, e := range m.GetCurrentPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrentPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrentPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrentPulse != nil && mm_atomic.LoadUint64(&m.afterGetCurrentPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCurrentPulseInspect logs each unmet expectation
func (m *PulseExtractorMock) MinimockGetCurrentPulseInspect() {
	for _, e := range m.GetCurrentPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulseExtractorMock.GetCurrentPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrentPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrentPulseCounter) < 1 {
		if m.GetCurrentPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulseExtractorMock.GetCurrentPulse")
		} else {
			m.t.Errorf("Expected call to PulseExtractorMock.GetCurrentPulse with params: %#v", *m.GetCurrentPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrentPulse != nil && mm_atomic.LoadUint64(&m.afterGetCurrentPulseCounter) < 1 {
		m.t.Error("Expected call to PulseExtractorMock.GetCurrentPulse")
	}
}

type mPulseExtractorMockGetNextFinalizedPulse struct {
	mock               *PulseExtractorMock
	defaultExpectation *PulseExtractorMockGetNextFinalizedPulseExpectation
	expectations       []*PulseExtractorMockGetNextFinalizedPulseExpectation

	callArgs []*PulseExtractorMockGetNextFinalizedPulseParams
	mutex    sync.RWMutex
}

// PulseExtractorMockGetNextFinalizedPulseExpectation specifies expectation struct of the PulseExtractor.GetNextFinalizedPulse
type PulseExtractorMockGetNextFinalizedPulseExpectation struct {
	mock    *PulseExtractorMock
	params  *PulseExtractorMockGetNextFinalizedPulseParams
	results *PulseExtractorMockGetNextFinalizedPulseResults
	Counter uint64
}

// PulseExtractorMockGetNextFinalizedPulseParams contains parameters of the PulseExtractor.GetNextFinalizedPulse
type PulseExtractorMockGetNextFinalizedPulseParams struct {
	ctx context.Context
	p   int64
}

// PulseExtractorMockGetNextFinalizedPulseResults contains results of the PulseExtractor.GetNextFinalizedPulse
type PulseExtractorMockGetNextFinalizedPulseResults struct {
	fp1 *exporter.FullPulse
	err error
}

// Expect sets up expected params for PulseExtractor.GetNextFinalizedPulse
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) Expect(ctx context.Context, p int64) *mPulseExtractorMockGetNextFinalizedPulse {
	if mmGetNextFinalizedPulse.mock.funcGetNextFinalizedPulse != nil {
		mmGetNextFinalizedPulse.mock.t.Fatalf("PulseExtractorMock.GetNextFinalizedPulse mock is already set by Set")
	}

	if mmGetNextFinalizedPulse.defaultExpectation == nil {
		mmGetNextFinalizedPulse.defaultExpectation = &PulseExtractorMockGetNextFinalizedPulseExpectation{}
	}

	mmGetNextFinalizedPulse.defaultExpectation.params = &PulseExtractorMockGetNextFinalizedPulseParams{ctx, p}
	for _, e := range mmGetNextFinalizedPulse.expectations {
		if minimock.Equal(e.params, mmGetNextFinalizedPulse.defaultExpectation.params) {
			mmGetNextFinalizedPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetNextFinalizedPulse.defaultExpectation.params)
		}
	}

	return mmGetNextFinalizedPulse
}

// Inspect accepts an inspector function that has same arguments as the PulseExtractor.GetNextFinalizedPulse
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) Inspect(f func(ctx context.Context, p int64)) *mPulseExtractorMockGetNextFinalizedPulse {
	if mmGetNextFinalizedPulse.mock.inspectFuncGetNextFinalizedPulse != nil {
		mmGetNextFinalizedPulse.mock.t.Fatalf("Inspect function is already set for PulseExtractorMock.GetNextFinalizedPulse")
	}

	mmGetNextFinalizedPulse.mock.inspectFuncGetNextFinalizedPulse = f

	return mmGetNextFinalizedPulse
}

// Return sets up results that will be returned by PulseExtractor.GetNextFinalizedPulse
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) Return(fp1 *exporter.FullPulse, err error) *PulseExtractorMock {
	if mmGetNextFinalizedPulse.mock.funcGetNextFinalizedPulse != nil {
		mmGetNextFinalizedPulse.mock.t.Fatalf("PulseExtractorMock.GetNextFinalizedPulse mock is already set by Set")
	}

	if mmGetNextFinalizedPulse.defaultExpectation == nil {
		mmGetNextFinalizedPulse.defaultExpectation = &PulseExtractorMockGetNextFinalizedPulseExpectation{mock: mmGetNextFinalizedPulse.mock}
	}
	mmGetNextFinalizedPulse.defaultExpectation.results = &PulseExtractorMockGetNextFinalizedPulseResults{fp1, err}
	return mmGetNextFinalizedPulse.mock
}

//Set uses given function f to mock the PulseExtractor.GetNextFinalizedPulse method
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) Set(f func(ctx context.Context, p int64) (fp1 *exporter.FullPulse, err error)) *PulseExtractorMock {
	if mmGetNextFinalizedPulse.defaultExpectation != nil {
		mmGetNextFinalizedPulse.mock.t.Fatalf("Default expectation is already set for the PulseExtractor.GetNextFinalizedPulse method")
	}

	if len(mmGetNextFinalizedPulse.expectations) > 0 {
		mmGetNextFinalizedPulse.mock.t.Fatalf("Some expectations are already set for the PulseExtractor.GetNextFinalizedPulse method")
	}

	mmGetNextFinalizedPulse.mock.funcGetNextFinalizedPulse = f
	return mmGetNextFinalizedPulse.mock
}

// When sets expectation for the PulseExtractor.GetNextFinalizedPulse which will trigger the result defined by the following
// Then helper
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) When(ctx context.Context, p int64) *PulseExtractorMockGetNextFinalizedPulseExpectation {
	if mmGetNextFinalizedPulse.mock.funcGetNextFinalizedPulse != nil {
		mmGetNextFinalizedPulse.mock.t.Fatalf("PulseExtractorMock.GetNextFinalizedPulse mock is already set by Set")
	}

	expectation := &PulseExtractorMockGetNextFinalizedPulseExpectation{
		mock:   mmGetNextFinalizedPulse.mock,
		params: &PulseExtractorMockGetNextFinalizedPulseParams{ctx, p},
	}
	mmGetNextFinalizedPulse.expectations = append(mmGetNextFinalizedPulse.expectations, expectation)
	return expectation
}

// Then sets up PulseExtractor.GetNextFinalizedPulse return parameters for the expectation previously defined by the When method
func (e *PulseExtractorMockGetNextFinalizedPulseExpectation) Then(fp1 *exporter.FullPulse, err error) *PulseExtractorMock {
	e.results = &PulseExtractorMockGetNextFinalizedPulseResults{fp1, err}
	return e.mock
}

// GetNextFinalizedPulse implements interfaces.PulseExtractor
func (mmGetNextFinalizedPulse *PulseExtractorMock) GetNextFinalizedPulse(ctx context.Context, p int64) (fp1 *exporter.FullPulse, err error) {
	mm_atomic.AddUint64(&mmGetNextFinalizedPulse.beforeGetNextFinalizedPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNextFinalizedPulse.afterGetNextFinalizedPulseCounter, 1)

	if mmGetNextFinalizedPulse.inspectFuncGetNextFinalizedPulse != nil {
		mmGetNextFinalizedPulse.inspectFuncGetNextFinalizedPulse(ctx, p)
	}

	mm_params := &PulseExtractorMockGetNextFinalizedPulseParams{ctx, p}

	// Record call args
	mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.mutex.Lock()
	mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.callArgs = append(mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.callArgs, mm_params)
	mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.mutex.Unlock()

	for _, e := range mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.fp1, e.results.err
		}
	}

	if mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.defaultExpectation.Counter, 1)
		mm_want := mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.defaultExpectation.params
		mm_got := PulseExtractorMockGetNextFinalizedPulseParams{ctx, p}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetNextFinalizedPulse.t.Errorf("PulseExtractorMock.GetNextFinalizedPulse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetNextFinalizedPulse.GetNextFinalizedPulseMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNextFinalizedPulse.t.Fatal("No results are set for the PulseExtractorMock.GetNextFinalizedPulse")
		}
		return (*mm_results).fp1, (*mm_results).err
	}
	if mmGetNextFinalizedPulse.funcGetNextFinalizedPulse != nil {
		return mmGetNextFinalizedPulse.funcGetNextFinalizedPulse(ctx, p)
	}
	mmGetNextFinalizedPulse.t.Fatalf("Unexpected call to PulseExtractorMock.GetNextFinalizedPulse. %v %v", ctx, p)
	return
}

// GetNextFinalizedPulseAfterCounter returns a count of finished PulseExtractorMock.GetNextFinalizedPulse invocations
func (mmGetNextFinalizedPulse *PulseExtractorMock) GetNextFinalizedPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNextFinalizedPulse.afterGetNextFinalizedPulseCounter)
}

// GetNextFinalizedPulseBeforeCounter returns a count of PulseExtractorMock.GetNextFinalizedPulse invocations
func (mmGetNextFinalizedPulse *PulseExtractorMock) GetNextFinalizedPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNextFinalizedPulse.beforeGetNextFinalizedPulseCounter)
}

// Calls returns a list of arguments used in each call to PulseExtractorMock.GetNextFinalizedPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetNextFinalizedPulse *mPulseExtractorMockGetNextFinalizedPulse) Calls() []*PulseExtractorMockGetNextFinalizedPulseParams {
	mmGetNextFinalizedPulse.mutex.RLock()

	argCopy := make([]*PulseExtractorMockGetNextFinalizedPulseParams, len(mmGetNextFinalizedPulse.callArgs))
	copy(argCopy, mmGetNextFinalizedPulse.callArgs)

	mmGetNextFinalizedPulse.mutex.RUnlock()

	return argCopy
}

// MinimockGetNextFinalizedPulseDone returns true if the count of the GetNextFinalizedPulse invocations corresponds
// the number of defined expectations
func (m *PulseExtractorMock) MinimockGetNextFinalizedPulseDone() bool {
	for _, e := range m.GetNextFinalizedPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNextFinalizedPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNextFinalizedPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNextFinalizedPulse != nil && mm_atomic.LoadUint64(&m.afterGetNextFinalizedPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNextFinalizedPulseInspect logs each unmet expectation
func (m *PulseExtractorMock) MinimockGetNextFinalizedPulseInspect() {
	for _, e := range m.GetNextFinalizedPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulseExtractorMock.GetNextFinalizedPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNextFinalizedPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNextFinalizedPulseCounter) < 1 {
		if m.GetNextFinalizedPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulseExtractorMock.GetNextFinalizedPulse")
		} else {
			m.t.Errorf("Expected call to PulseExtractorMock.GetNextFinalizedPulse with params: %#v", *m.GetNextFinalizedPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNextFinalizedPulse != nil && mm_atomic.LoadUint64(&m.afterGetNextFinalizedPulseCounter) < 1 {
		m.t.Error("Expected call to PulseExtractorMock.GetNextFinalizedPulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PulseExtractorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetCurrentPulseInspect()

		m.MinimockGetNextFinalizedPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PulseExtractorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PulseExtractorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCurrentPulseDone() &&
		m.MinimockGetNextFinalizedPulseDone()
}
