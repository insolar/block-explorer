package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/block-explorer/etl/models"
)

// StorageExporterFetcherMock implements interfaces.StorageExporterFetcher
type StorageExporterFetcherMock struct {
	t minimock.Tester

	funcGetNextCompletePulseFilterByPrototypeReference          func(prevPulse int64, prototypes [][]byte) (p1 models.Pulse, err error)
	inspectFuncGetNextCompletePulseFilterByPrototypeReference   func(prevPulse int64, prototypes [][]byte)
	afterGetNextCompletePulseFilterByPrototypeReferenceCounter  uint64
	beforeGetNextCompletePulseFilterByPrototypeReferenceCounter uint64
	GetNextCompletePulseFilterByPrototypeReferenceMock          mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference

	funcGetRecordsByPrototype          func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (sa1 []models.State, err error)
	inspectFuncGetRecordsByPrototype   func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32)
	afterGetRecordsByPrototypeCounter  uint64
	beforeGetRecordsByPrototypeCounter uint64
	GetRecordsByPrototypeMock          mStorageExporterFetcherMockGetRecordsByPrototype
}

// NewStorageExporterFetcherMock returns a mock for interfaces.StorageExporterFetcher
func NewStorageExporterFetcherMock(t minimock.Tester) *StorageExporterFetcherMock {
	m := &StorageExporterFetcherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetNextCompletePulseFilterByPrototypeReferenceMock = mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference{mock: m}
	m.GetNextCompletePulseFilterByPrototypeReferenceMock.callArgs = []*StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams{}

	m.GetRecordsByPrototypeMock = mStorageExporterFetcherMockGetRecordsByPrototype{mock: m}
	m.GetRecordsByPrototypeMock.callArgs = []*StorageExporterFetcherMockGetRecordsByPrototypeParams{}

	return m
}

type mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference struct {
	mock               *StorageExporterFetcherMock
	defaultExpectation *StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation
	expectations       []*StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation

	callArgs []*StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams
	mutex    sync.RWMutex
}

// StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation specifies expectation struct of the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
type StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation struct {
	mock    *StorageExporterFetcherMock
	params  *StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams
	results *StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceResults
	Counter uint64
}

// StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams contains parameters of the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
type StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams struct {
	prevPulse  int64
	prototypes [][]byte
}

// StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceResults contains results of the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
type StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceResults struct {
	p1  models.Pulse
	err error
}

// Expect sets up expected params for StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) Expect(prevPulse int64, prototypes [][]byte) *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference {
	if mmGetNextCompletePulseFilterByPrototypeReference.mock.funcGetNextCompletePulseFilterByPrototypeReference != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference mock is already set by Set")
	}

	if mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation == nil {
		mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation = &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation{}
	}

	mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation.params = &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams{prevPulse, prototypes}
	for _, e := range mmGetNextCompletePulseFilterByPrototypeReference.expectations {
		if minimock.Equal(e.params, mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation.params) {
			mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation.params)
		}
	}

	return mmGetNextCompletePulseFilterByPrototypeReference
}

// Inspect accepts an inspector function that has same arguments as the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) Inspect(f func(prevPulse int64, prototypes [][]byte)) *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference {
	if mmGetNextCompletePulseFilterByPrototypeReference.mock.inspectFuncGetNextCompletePulseFilterByPrototypeReference != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("Inspect function is already set for StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference")
	}

	mmGetNextCompletePulseFilterByPrototypeReference.mock.inspectFuncGetNextCompletePulseFilterByPrototypeReference = f

	return mmGetNextCompletePulseFilterByPrototypeReference
}

// Return sets up results that will be returned by StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) Return(p1 models.Pulse, err error) *StorageExporterFetcherMock {
	if mmGetNextCompletePulseFilterByPrototypeReference.mock.funcGetNextCompletePulseFilterByPrototypeReference != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference mock is already set by Set")
	}

	if mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation == nil {
		mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation = &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation{mock: mmGetNextCompletePulseFilterByPrototypeReference.mock}
	}
	mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation.results = &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceResults{p1, err}
	return mmGetNextCompletePulseFilterByPrototypeReference.mock
}

//Set uses given function f to mock the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference method
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) Set(f func(prevPulse int64, prototypes [][]byte) (p1 models.Pulse, err error)) *StorageExporterFetcherMock {
	if mmGetNextCompletePulseFilterByPrototypeReference.defaultExpectation != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("Default expectation is already set for the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference method")
	}

	if len(mmGetNextCompletePulseFilterByPrototypeReference.expectations) > 0 {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("Some expectations are already set for the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference method")
	}

	mmGetNextCompletePulseFilterByPrototypeReference.mock.funcGetNextCompletePulseFilterByPrototypeReference = f
	return mmGetNextCompletePulseFilterByPrototypeReference.mock
}

// When sets expectation for the StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference which will trigger the result defined by the following
// Then helper
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) When(prevPulse int64, prototypes [][]byte) *StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation {
	if mmGetNextCompletePulseFilterByPrototypeReference.mock.funcGetNextCompletePulseFilterByPrototypeReference != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.mock.t.Fatalf("StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference mock is already set by Set")
	}

	expectation := &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation{
		mock:   mmGetNextCompletePulseFilterByPrototypeReference.mock,
		params: &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams{prevPulse, prototypes},
	}
	mmGetNextCompletePulseFilterByPrototypeReference.expectations = append(mmGetNextCompletePulseFilterByPrototypeReference.expectations, expectation)
	return expectation
}

// Then sets up StorageExporterFetcher.GetNextCompletePulseFilterByPrototypeReference return parameters for the expectation previously defined by the When method
func (e *StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceExpectation) Then(p1 models.Pulse, err error) *StorageExporterFetcherMock {
	e.results = &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceResults{p1, err}
	return e.mock
}

// GetNextCompletePulseFilterByPrototypeReference implements interfaces.StorageExporterFetcher
func (mmGetNextCompletePulseFilterByPrototypeReference *StorageExporterFetcherMock) GetNextCompletePulseFilterByPrototypeReference(prevPulse int64, prototypes [][]byte) (p1 models.Pulse, err error) {
	mm_atomic.AddUint64(&mmGetNextCompletePulseFilterByPrototypeReference.beforeGetNextCompletePulseFilterByPrototypeReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNextCompletePulseFilterByPrototypeReference.afterGetNextCompletePulseFilterByPrototypeReferenceCounter, 1)

	if mmGetNextCompletePulseFilterByPrototypeReference.inspectFuncGetNextCompletePulseFilterByPrototypeReference != nil {
		mmGetNextCompletePulseFilterByPrototypeReference.inspectFuncGetNextCompletePulseFilterByPrototypeReference(prevPulse, prototypes)
	}

	mm_params := &StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams{prevPulse, prototypes}

	// Record call args
	mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.mutex.Lock()
	mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.callArgs = append(mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.callArgs, mm_params)
	mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.mutex.Unlock()

	for _, e := range mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation.Counter, 1)
		mm_want := mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation.params
		mm_got := StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams{prevPulse, prototypes}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetNextCompletePulseFilterByPrototypeReference.t.Errorf("StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetNextCompletePulseFilterByPrototypeReference.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNextCompletePulseFilterByPrototypeReference.t.Fatal("No results are set for the StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGetNextCompletePulseFilterByPrototypeReference.funcGetNextCompletePulseFilterByPrototypeReference != nil {
		return mmGetNextCompletePulseFilterByPrototypeReference.funcGetNextCompletePulseFilterByPrototypeReference(prevPulse, prototypes)
	}
	mmGetNextCompletePulseFilterByPrototypeReference.t.Fatalf("Unexpected call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference. %v %v", prevPulse, prototypes)
	return
}

// GetNextCompletePulseFilterByPrototypeReferenceAfterCounter returns a count of finished StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference invocations
func (mmGetNextCompletePulseFilterByPrototypeReference *StorageExporterFetcherMock) GetNextCompletePulseFilterByPrototypeReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNextCompletePulseFilterByPrototypeReference.afterGetNextCompletePulseFilterByPrototypeReferenceCounter)
}

// GetNextCompletePulseFilterByPrototypeReferenceBeforeCounter returns a count of StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference invocations
func (mmGetNextCompletePulseFilterByPrototypeReference *StorageExporterFetcherMock) GetNextCompletePulseFilterByPrototypeReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNextCompletePulseFilterByPrototypeReference.beforeGetNextCompletePulseFilterByPrototypeReferenceCounter)
}

// Calls returns a list of arguments used in each call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetNextCompletePulseFilterByPrototypeReference *mStorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReference) Calls() []*StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams {
	mmGetNextCompletePulseFilterByPrototypeReference.mutex.RLock()

	argCopy := make([]*StorageExporterFetcherMockGetNextCompletePulseFilterByPrototypeReferenceParams, len(mmGetNextCompletePulseFilterByPrototypeReference.callArgs))
	copy(argCopy, mmGetNextCompletePulseFilterByPrototypeReference.callArgs)

	mmGetNextCompletePulseFilterByPrototypeReference.mutex.RUnlock()

	return argCopy
}

// MinimockGetNextCompletePulseFilterByPrototypeReferenceDone returns true if the count of the GetNextCompletePulseFilterByPrototypeReference invocations corresponds
// the number of defined expectations
func (m *StorageExporterFetcherMock) MinimockGetNextCompletePulseFilterByPrototypeReferenceDone() bool {
	for _, e := range m.GetNextCompletePulseFilterByPrototypeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNextCompletePulseFilterByPrototypeReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNextCompletePulseFilterByPrototypeReference != nil && mm_atomic.LoadUint64(&m.afterGetNextCompletePulseFilterByPrototypeReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNextCompletePulseFilterByPrototypeReferenceInspect logs each unmet expectation
func (m *StorageExporterFetcherMock) MinimockGetNextCompletePulseFilterByPrototypeReferenceInspect() {
	for _, e := range m.GetNextCompletePulseFilterByPrototypeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNextCompletePulseFilterByPrototypeReferenceCounter) < 1 {
		if m.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference")
		} else {
			m.t.Errorf("Expected call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference with params: %#v", *m.GetNextCompletePulseFilterByPrototypeReferenceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNextCompletePulseFilterByPrototypeReference != nil && mm_atomic.LoadUint64(&m.afterGetNextCompletePulseFilterByPrototypeReferenceCounter) < 1 {
		m.t.Error("Expected call to StorageExporterFetcherMock.GetNextCompletePulseFilterByPrototypeReference")
	}
}

type mStorageExporterFetcherMockGetRecordsByPrototype struct {
	mock               *StorageExporterFetcherMock
	defaultExpectation *StorageExporterFetcherMockGetRecordsByPrototypeExpectation
	expectations       []*StorageExporterFetcherMockGetRecordsByPrototypeExpectation

	callArgs []*StorageExporterFetcherMockGetRecordsByPrototypeParams
	mutex    sync.RWMutex
}

// StorageExporterFetcherMockGetRecordsByPrototypeExpectation specifies expectation struct of the StorageExporterFetcher.GetRecordsByPrototype
type StorageExporterFetcherMockGetRecordsByPrototypeExpectation struct {
	mock    *StorageExporterFetcherMock
	params  *StorageExporterFetcherMockGetRecordsByPrototypeParams
	results *StorageExporterFetcherMockGetRecordsByPrototypeResults
	Counter uint64
}

// StorageExporterFetcherMockGetRecordsByPrototypeParams contains parameters of the StorageExporterFetcher.GetRecordsByPrototype
type StorageExporterFetcherMockGetRecordsByPrototypeParams struct {
	prototypeRef [][]byte
	pulseNumber  int64
	limit        uint32
	offset       uint32
}

// StorageExporterFetcherMockGetRecordsByPrototypeResults contains results of the StorageExporterFetcher.GetRecordsByPrototype
type StorageExporterFetcherMockGetRecordsByPrototypeResults struct {
	sa1 []models.State
	err error
}

// Expect sets up expected params for StorageExporterFetcher.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) Expect(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) *mStorageExporterFetcherMockGetRecordsByPrototype {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExporterFetcherMock.GetRecordsByPrototype mock is already set by Set")
	}

	if mmGetRecordsByPrototype.defaultExpectation == nil {
		mmGetRecordsByPrototype.defaultExpectation = &StorageExporterFetcherMockGetRecordsByPrototypeExpectation{}
	}

	mmGetRecordsByPrototype.defaultExpectation.params = &StorageExporterFetcherMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}
	for _, e := range mmGetRecordsByPrototype.expectations {
		if minimock.Equal(e.params, mmGetRecordsByPrototype.defaultExpectation.params) {
			mmGetRecordsByPrototype.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRecordsByPrototype.defaultExpectation.params)
		}
	}

	return mmGetRecordsByPrototype
}

// Inspect accepts an inspector function that has same arguments as the StorageExporterFetcher.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) Inspect(f func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32)) *mStorageExporterFetcherMockGetRecordsByPrototype {
	if mmGetRecordsByPrototype.mock.inspectFuncGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("Inspect function is already set for StorageExporterFetcherMock.GetRecordsByPrototype")
	}

	mmGetRecordsByPrototype.mock.inspectFuncGetRecordsByPrototype = f

	return mmGetRecordsByPrototype
}

// Return sets up results that will be returned by StorageExporterFetcher.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) Return(sa1 []models.State, err error) *StorageExporterFetcherMock {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExporterFetcherMock.GetRecordsByPrototype mock is already set by Set")
	}

	if mmGetRecordsByPrototype.defaultExpectation == nil {
		mmGetRecordsByPrototype.defaultExpectation = &StorageExporterFetcherMockGetRecordsByPrototypeExpectation{mock: mmGetRecordsByPrototype.mock}
	}
	mmGetRecordsByPrototype.defaultExpectation.results = &StorageExporterFetcherMockGetRecordsByPrototypeResults{sa1, err}
	return mmGetRecordsByPrototype.mock
}

//Set uses given function f to mock the StorageExporterFetcher.GetRecordsByPrototype method
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) Set(f func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (sa1 []models.State, err error)) *StorageExporterFetcherMock {
	if mmGetRecordsByPrototype.defaultExpectation != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("Default expectation is already set for the StorageExporterFetcher.GetRecordsByPrototype method")
	}

	if len(mmGetRecordsByPrototype.expectations) > 0 {
		mmGetRecordsByPrototype.mock.t.Fatalf("Some expectations are already set for the StorageExporterFetcher.GetRecordsByPrototype method")
	}

	mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype = f
	return mmGetRecordsByPrototype.mock
}

// When sets expectation for the StorageExporterFetcher.GetRecordsByPrototype which will trigger the result defined by the following
// Then helper
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) When(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) *StorageExporterFetcherMockGetRecordsByPrototypeExpectation {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExporterFetcherMock.GetRecordsByPrototype mock is already set by Set")
	}

	expectation := &StorageExporterFetcherMockGetRecordsByPrototypeExpectation{
		mock:   mmGetRecordsByPrototype.mock,
		params: &StorageExporterFetcherMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset},
	}
	mmGetRecordsByPrototype.expectations = append(mmGetRecordsByPrototype.expectations, expectation)
	return expectation
}

// Then sets up StorageExporterFetcher.GetRecordsByPrototype return parameters for the expectation previously defined by the When method
func (e *StorageExporterFetcherMockGetRecordsByPrototypeExpectation) Then(sa1 []models.State, err error) *StorageExporterFetcherMock {
	e.results = &StorageExporterFetcherMockGetRecordsByPrototypeResults{sa1, err}
	return e.mock
}

// GetRecordsByPrototype implements interfaces.StorageExporterFetcher
func (mmGetRecordsByPrototype *StorageExporterFetcherMock) GetRecordsByPrototype(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (sa1 []models.State, err error) {
	mm_atomic.AddUint64(&mmGetRecordsByPrototype.beforeGetRecordsByPrototypeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRecordsByPrototype.afterGetRecordsByPrototypeCounter, 1)

	if mmGetRecordsByPrototype.inspectFuncGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.inspectFuncGetRecordsByPrototype(prototypeRef, pulseNumber, limit, offset)
	}

	mm_params := &StorageExporterFetcherMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}

	// Record call args
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.mutex.Lock()
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.callArgs = append(mmGetRecordsByPrototype.GetRecordsByPrototypeMock.callArgs, mm_params)
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.mutex.Unlock()

	for _, e := range mmGetRecordsByPrototype.GetRecordsByPrototypeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.params
		mm_got := StorageExporterFetcherMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRecordsByPrototype.t.Errorf("StorageExporterFetcherMock.GetRecordsByPrototype got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRecordsByPrototype.t.Fatal("No results are set for the StorageExporterFetcherMock.GetRecordsByPrototype")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmGetRecordsByPrototype.funcGetRecordsByPrototype != nil {
		return mmGetRecordsByPrototype.funcGetRecordsByPrototype(prototypeRef, pulseNumber, limit, offset)
	}
	mmGetRecordsByPrototype.t.Fatalf("Unexpected call to StorageExporterFetcherMock.GetRecordsByPrototype. %v %v %v %v", prototypeRef, pulseNumber, limit, offset)
	return
}

// GetRecordsByPrototypeAfterCounter returns a count of finished StorageExporterFetcherMock.GetRecordsByPrototype invocations
func (mmGetRecordsByPrototype *StorageExporterFetcherMock) GetRecordsByPrototypeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecordsByPrototype.afterGetRecordsByPrototypeCounter)
}

// GetRecordsByPrototypeBeforeCounter returns a count of StorageExporterFetcherMock.GetRecordsByPrototype invocations
func (mmGetRecordsByPrototype *StorageExporterFetcherMock) GetRecordsByPrototypeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecordsByPrototype.beforeGetRecordsByPrototypeCounter)
}

// Calls returns a list of arguments used in each call to StorageExporterFetcherMock.GetRecordsByPrototype.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRecordsByPrototype *mStorageExporterFetcherMockGetRecordsByPrototype) Calls() []*StorageExporterFetcherMockGetRecordsByPrototypeParams {
	mmGetRecordsByPrototype.mutex.RLock()

	argCopy := make([]*StorageExporterFetcherMockGetRecordsByPrototypeParams, len(mmGetRecordsByPrototype.callArgs))
	copy(argCopy, mmGetRecordsByPrototype.callArgs)

	mmGetRecordsByPrototype.mutex.RUnlock()

	return argCopy
}

// MinimockGetRecordsByPrototypeDone returns true if the count of the GetRecordsByPrototype invocations corresponds
// the number of defined expectations
func (m *StorageExporterFetcherMock) MinimockGetRecordsByPrototypeDone() bool {
	for _, e := range m.GetRecordsByPrototypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordsByPrototypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecordsByPrototype != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRecordsByPrototypeInspect logs each unmet expectation
func (m *StorageExporterFetcherMock) MinimockGetRecordsByPrototypeInspect() {
	for _, e := range m.GetRecordsByPrototypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageExporterFetcherMock.GetRecordsByPrototype with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordsByPrototypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		if m.GetRecordsByPrototypeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageExporterFetcherMock.GetRecordsByPrototype")
		} else {
			m.t.Errorf("Expected call to StorageExporterFetcherMock.GetRecordsByPrototype with params: %#v", *m.GetRecordsByPrototypeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecordsByPrototype != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		m.t.Error("Expected call to StorageExporterFetcherMock.GetRecordsByPrototype")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageExporterFetcherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetNextCompletePulseFilterByPrototypeReferenceInspect()

		m.MinimockGetRecordsByPrototypeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageExporterFetcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageExporterFetcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetNextCompletePulseFilterByPrototypeReferenceDone() &&
		m.MinimockGetRecordsByPrototypeDone()
}
