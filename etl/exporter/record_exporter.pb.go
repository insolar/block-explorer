// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: etl/exporter/record_exporter.proto

package exporter

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetRecordsRequest struct {
	Polymorph    uint32   `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph,omitempty"`
	PulseNumber  int64    `protobuf:"varint,1,opt,name=PulseNumber,proto3" json:"PulseNumber,omitempty"`
	Prototypes   [][]byte `protobuf:"bytes,2,rep,name=Prototypes,proto3" json:"Prototypes,omitempty"`
	RecordNumber uint32   `protobuf:"varint,3,opt,name=RecordNumber,proto3" json:"RecordNumber,omitempty"`
	Count        uint32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *GetRecordsRequest) Reset()      { *m = GetRecordsRequest{} }
func (*GetRecordsRequest) ProtoMessage() {}
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e5b7e8e6ba6921, []int{0}
}
func (m *GetRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordsRequest.Merge(m, src)
}
func (m *GetRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordsRequest proto.InternalMessageInfo

func (m *GetRecordsRequest) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *GetRecordsRequest) GetPulseNumber() int64 {
	if m != nil {
		return m.PulseNumber
	}
	return 0
}

func (m *GetRecordsRequest) GetPrototypes() [][]byte {
	if m != nil {
		return m.Prototypes
	}
	return nil
}

func (m *GetRecordsRequest) GetRecordNumber() uint32 {
	if m != nil {
		return m.RecordNumber
	}
	return 0
}

func (m *GetRecordsRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetRecordsResponse struct {
	Polymorph           uint32 `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph,omitempty"`
	RecordNumber        uint32 `protobuf:"varint,1,opt,name=RecordNumber,proto3" json:"RecordNumber,omitempty"`
	Reference           []byte `protobuf:"bytes,2,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Type                string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	ObjectReference     []byte `protobuf:"bytes,4,opt,name=ObjectReference,proto3" json:"ObjectReference,omitempty"`
	PrototypeReference  []byte `protobuf:"bytes,5,opt,name=PrototypeReference,proto3" json:"PrototypeReference,omitempty"`
	Payload             []byte `protobuf:"bytes,6,opt,name=Payload,proto3" json:"Payload,omitempty"`
	PrevRecordReference []byte `protobuf:"bytes,7,opt,name=PrevRecordReference,proto3" json:"PrevRecordReference,omitempty"`
	PulseNumber         int64  `protobuf:"varint,8,opt,name=PulseNumber,proto3" json:"PulseNumber,omitempty"`
	Timestamp           int64  `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (m *GetRecordsResponse) Reset()      { *m = GetRecordsResponse{} }
func (*GetRecordsResponse) ProtoMessage() {}
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e5b7e8e6ba6921, []int{1}
}
func (m *GetRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordsResponse.Merge(m, src)
}
func (m *GetRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordsResponse proto.InternalMessageInfo

func (m *GetRecordsResponse) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *GetRecordsResponse) GetRecordNumber() uint32 {
	if m != nil {
		return m.RecordNumber
	}
	return 0
}

func (m *GetRecordsResponse) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *GetRecordsResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetRecordsResponse) GetObjectReference() []byte {
	if m != nil {
		return m.ObjectReference
	}
	return nil
}

func (m *GetRecordsResponse) GetPrototypeReference() []byte {
	if m != nil {
		return m.PrototypeReference
	}
	return nil
}

func (m *GetRecordsResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetRecordsResponse) GetPrevRecordReference() []byte {
	if m != nil {
		return m.PrevRecordReference
	}
	return nil
}

func (m *GetRecordsResponse) GetPulseNumber() int64 {
	if m != nil {
		return m.PulseNumber
	}
	return 0
}

func (m *GetRecordsResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRecordsRequest)(nil), "exporter.GetRecordsRequest")
	proto.RegisterType((*GetRecordsResponse)(nil), "exporter.GetRecordsResponse")
}

func init() {
	proto.RegisterFile("etl/exporter/record_exporter.proto", fileDescriptor_90e5b7e8e6ba6921)
}

var fileDescriptor_90e5b7e8e6ba6921 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbd, 0xce, 0xd3, 0x40,
	0x10, 0xf4, 0x25, 0xf9, 0x92, 0x78, 0x09, 0x7f, 0x0b, 0xc5, 0x09, 0xac, 0x93, 0xe5, 0xca, 0x55,
	0x12, 0x01, 0x4f, 0x00, 0x42, 0x14, 0x48, 0x60, 0x9d, 0xd2, 0x22, 0x94, 0x9f, 0x45, 0x80, 0xec,
	0x9c, 0x39, 0x9f, 0x11, 0xee, 0x78, 0x04, 0x1e, 0x83, 0x86, 0xf7, 0xa0, 0x4c, 0x99, 0x92, 0x38,
	0x0d, 0x15, 0xca, 0x23, 0x20, 0xce, 0x49, 0x1c, 0x12, 0x4b, 0x5f, 0xe7, 0x9d, 0x99, 0xdb, 0x59,
	0x6b, 0x06, 0x02, 0x32, 0xf1, 0x88, 0xbe, 0xa4, 0x4a, 0x1b, 0xd2, 0x23, 0x4d, 0x73, 0xa5, 0x17,
	0x6f, 0x0f, 0xf3, 0x30, 0xd5, 0xca, 0x28, 0xec, 0x1f, 0xe6, 0xe0, 0x07, 0x83, 0xbb, 0x2f, 0xc8,
	0x48, 0x2b, 0xcb, 0x24, 0x7d, 0xca, 0x29, 0x33, 0xe8, 0x81, 0x1b, 0xa9, 0xb8, 0x48, 0x94, 0x4e,
	0xdf, 0xf3, 0x3b, 0x3e, 0x0b, 0x6f, 0xca, 0x1a, 0x40, 0x1f, 0x6e, 0x44, 0x79, 0x9c, 0xd1, 0xab,
	0x3c, 0x99, 0x91, 0xe6, 0xcc, 0x67, 0x61, 0x5b, 0x9e, 0x42, 0x28, 0x00, 0xa2, 0x7f, 0x46, 0xa6,
	0x48, 0x29, 0xe3, 0x2d, 0xbf, 0x1d, 0x0e, 0xe4, 0x09, 0x82, 0x01, 0x0c, 0x2a, 0xc7, 0xfd, 0x8a,
	0xb6, 0xb5, 0xf8, 0x0f, 0xc3, 0xfb, 0x70, 0xf5, 0x4c, 0xe5, 0x4b, 0xc3, 0x3b, 0x96, 0xac, 0x86,
	0xe0, 0x4f, 0x0b, 0xf0, 0xf4, 0xde, 0x2c, 0x55, 0xcb, 0x8c, 0xae, 0x39, 0xf8, 0xdc, 0x8e, 0x35,
	0xd8, 0x79, 0xe0, 0x4a, 0x7a, 0x47, 0x9a, 0x96, 0x73, 0xe2, 0x2d, 0x9f, 0x85, 0x03, 0x59, 0x03,
	0x88, 0xd0, 0x99, 0x14, 0x29, 0xd9, 0x43, 0x5d, 0x69, 0xbf, 0x31, 0x84, 0xdb, 0xaf, 0x67, 0x1f,
	0x69, 0x6e, 0xea, 0x77, 0x1d, 0xfb, 0xee, 0x1c, 0xc6, 0x21, 0xe0, 0xf1, 0xe7, 0x6b, 0xf1, 0x95,
	0x15, 0x37, 0x30, 0xc8, 0xa1, 0x17, 0x4d, 0x8b, 0x58, 0x4d, 0x17, 0xbc, 0x6b, 0x45, 0x87, 0x11,
	0xc7, 0x70, 0x2f, 0xd2, 0xf4, 0xb9, 0xba, 0xbc, 0x5e, 0xd5, 0xb3, 0xaa, 0x26, 0xea, 0x3c, 0xac,
	0xfe, 0x65, 0x58, 0x1e, 0xb8, 0x93, 0x0f, 0x09, 0x65, 0x66, 0x9a, 0xa4, 0xdc, 0xb5, 0x7c, 0x0d,
	0x3c, 0x7a, 0x03, 0xb7, 0xaa, 0x95, 0xcf, 0xf7, 0x95, 0xc1, 0x97, 0x00, 0x75, 0x02, 0xf8, 0x70,
	0x78, 0xec, 0xd6, 0x45, 0x8f, 0x1e, 0x78, 0xcd, 0x64, 0x15, 0x5a, 0xe0, 0x8c, 0xd9, 0xd3, 0x27,
	0xab, 0x8d, 0x70, 0xd6, 0x1b, 0xe1, 0xec, 0x36, 0x82, 0x7d, 0x2d, 0x05, 0xfb, 0x5e, 0x0a, 0xf6,
	0xb3, 0x14, 0x6c, 0x55, 0x0a, 0xf6, 0xab, 0x14, 0xec, 0x77, 0x29, 0x9c, 0x5d, 0x29, 0xd8, 0xb7,
	0xad, 0x70, 0x56, 0x5b, 0xe1, 0xac, 0xb7, 0xc2, 0x99, 0x75, 0x6d, 0x8d, 0x1f, 0xff, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xb0, 0x00, 0x19, 0xe4, 0xec, 0x02, 0x00, 0x00,
}

func (this *GetRecordsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecordsRequest)
	if !ok {
		that2, ok := that.(GetRecordsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if len(this.Prototypes) != len(that1.Prototypes) {
		return false
	}
	for i := range this.Prototypes {
		if !bytes.Equal(this.Prototypes[i], that1.Prototypes[i]) {
			return false
		}
	}
	if this.RecordNumber != that1.RecordNumber {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GetRecordsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecordsResponse)
	if !ok {
		that2, ok := that.(GetRecordsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.RecordNumber != that1.RecordNumber {
		return false
	}
	if !bytes.Equal(this.Reference, that1.Reference) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.ObjectReference, that1.ObjectReference) {
		return false
	}
	if !bytes.Equal(this.PrototypeReference, that1.PrototypeReference) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !bytes.Equal(this.PrevRecordReference, that1.PrevRecordReference) {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *GetRecordsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&exporter.GetRecordsRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "PulseNumber: "+fmt.Sprintf("%#v", this.PulseNumber)+",\n")
	s = append(s, "Prototypes: "+fmt.Sprintf("%#v", this.Prototypes)+",\n")
	s = append(s, "RecordNumber: "+fmt.Sprintf("%#v", this.RecordNumber)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRecordsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&exporter.GetRecordsResponse{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "RecordNumber: "+fmt.Sprintf("%#v", this.RecordNumber)+",\n")
	s = append(s, "Reference: "+fmt.Sprintf("%#v", this.Reference)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ObjectReference: "+fmt.Sprintf("%#v", this.ObjectReference)+",\n")
	s = append(s, "PrototypeReference: "+fmt.Sprintf("%#v", this.PrototypeReference)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "PrevRecordReference: "+fmt.Sprintf("%#v", this.PrevRecordReference)+",\n")
	s = append(s, "PulseNumber: "+fmt.Sprintf("%#v", this.PulseNumber)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRecordExporter(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecordExporterClient is the client API for RecordExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordExporterClient interface {
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (RecordExporter_GetRecordsClient, error)
}

type recordExporterClient struct {
	cc *grpc.ClientConn
}

func NewRecordExporterClient(cc *grpc.ClientConn) RecordExporterClient {
	return &recordExporterClient{cc}
}

func (c *recordExporterClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (RecordExporter_GetRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RecordExporter_serviceDesc.Streams[0], "/exporter.RecordExporter/GetRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &recordExporterGetRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordExporter_GetRecordsClient interface {
	Recv() (*GetRecordsResponse, error)
	grpc.ClientStream
}

type recordExporterGetRecordsClient struct {
	grpc.ClientStream
}

func (x *recordExporterGetRecordsClient) Recv() (*GetRecordsResponse, error) {
	m := new(GetRecordsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordExporterServer is the server API for RecordExporter service.
type RecordExporterServer interface {
	GetRecords(*GetRecordsRequest, RecordExporter_GetRecordsServer) error
}

// UnimplementedRecordExporterServer can be embedded to have forward compatible implementations.
type UnimplementedRecordExporterServer struct {
}

func (*UnimplementedRecordExporterServer) GetRecords(req *GetRecordsRequest, srv RecordExporter_GetRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}

func RegisterRecordExporterServer(s *grpc.Server, srv RecordExporterServer) {
	s.RegisterService(&_RecordExporter_serviceDesc, srv)
}

func _RecordExporter_GetRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordExporterServer).GetRecords(m, &recordExporterGetRecordsServer{stream})
}

type RecordExporter_GetRecordsServer interface {
	Send(*GetRecordsResponse) error
	grpc.ServerStream
}

type recordExporterGetRecordsServer struct {
	grpc.ServerStream
}

func (x *recordExporterGetRecordsServer) Send(m *GetRecordsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RecordExporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exporter.RecordExporter",
	HandlerType: (*RecordExporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRecords",
			Handler:       _RecordExporter_GetRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "etl/exporter/record_exporter.proto",
}

func (m *GetRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.Polymorph))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Count != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.RecordNumber != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.RecordNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Prototypes) > 0 {
		for iNdEx := len(m.Prototypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prototypes[iNdEx])
			copy(dAtA[i:], m.Prototypes[iNdEx])
			i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.Prototypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PulseNumber != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.PulseNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.Polymorph))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Timestamp != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.PulseNumber != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.PulseNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PrevRecordReference) > 0 {
		i -= len(m.PrevRecordReference)
		copy(dAtA[i:], m.PrevRecordReference)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.PrevRecordReference)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrototypeReference) > 0 {
		i -= len(m.PrototypeReference)
		copy(dAtA[i:], m.PrototypeReference)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.PrototypeReference)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ObjectReference) > 0 {
		i -= len(m.ObjectReference)
		copy(dAtA[i:], m.ObjectReference)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.ObjectReference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintRecordExporter(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecordNumber != 0 {
		i = encodeVarintRecordExporter(dAtA, i, uint64(m.RecordNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecordExporter(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecordExporter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PulseNumber != 0 {
		n += 1 + sovRecordExporter(uint64(m.PulseNumber))
	}
	if len(m.Prototypes) > 0 {
		for _, b := range m.Prototypes {
			l = len(b)
			n += 1 + l + sovRecordExporter(uint64(l))
		}
	}
	if m.RecordNumber != 0 {
		n += 1 + sovRecordExporter(uint64(m.RecordNumber))
	}
	if m.Count != 0 {
		n += 1 + sovRecordExporter(uint64(m.Count))
	}
	if m.Polymorph != 0 {
		n += 2 + sovRecordExporter(uint64(m.Polymorph))
	}
	return n
}

func (m *GetRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordNumber != 0 {
		n += 1 + sovRecordExporter(uint64(m.RecordNumber))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	l = len(m.ObjectReference)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	l = len(m.PrototypeReference)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	l = len(m.PrevRecordReference)
	if l > 0 {
		n += 1 + l + sovRecordExporter(uint64(l))
	}
	if m.PulseNumber != 0 {
		n += 1 + sovRecordExporter(uint64(m.PulseNumber))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRecordExporter(uint64(m.Timestamp))
	}
	if m.Polymorph != 0 {
		n += 2 + sovRecordExporter(uint64(m.Polymorph))
	}
	return n
}

func sovRecordExporter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecordExporter(x uint64) (n int) {
	return sovRecordExporter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRecordsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecordsRequest{`,
		`PulseNumber:` + fmt.Sprintf("%v", this.PulseNumber) + `,`,
		`Prototypes:` + fmt.Sprintf("%v", this.Prototypes) + `,`,
		`RecordNumber:` + fmt.Sprintf("%v", this.RecordNumber) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRecordsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecordsResponse{`,
		`RecordNumber:` + fmt.Sprintf("%v", this.RecordNumber) + `,`,
		`Reference:` + fmt.Sprintf("%v", this.Reference) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ObjectReference:` + fmt.Sprintf("%v", this.ObjectReference) + `,`,
		`PrototypeReference:` + fmt.Sprintf("%v", this.PrototypeReference) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`PrevRecordReference:` + fmt.Sprintf("%v", this.PrevRecordReference) + `,`,
		`PulseNumber:` + fmt.Sprintf("%v", this.PulseNumber) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRecordExporter(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordExporter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prototypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prototypes = append(m.Prototypes, make([]byte, postIndex-iNdEx))
			copy(m.Prototypes[len(m.Prototypes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNumber", wireType)
			}
			m.RecordNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecordExporter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordExporter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNumber", wireType)
			}
			m.RecordNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference[:0], dAtA[iNdEx:postIndex]...)
			if m.Reference == nil {
				m.Reference = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectReference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectReference = append(m.ObjectReference[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjectReference == nil {
				m.ObjectReference = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrototypeReference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrototypeReference = append(m.PrototypeReference[:0], dAtA[iNdEx:postIndex]...)
			if m.PrototypeReference == nil {
				m.PrototypeReference = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRecordReference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecordExporter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevRecordReference = append(m.PrevRecordReference[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevRecordReference == nil {
				m.PrevRecordReference = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecordExporter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecordExporter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecordExporter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecordExporter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordExporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecordExporter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecordExporter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecordExporter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecordExporter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecordExporter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecordExporter = fmt.Errorf("proto: unexpected end of group")
)
