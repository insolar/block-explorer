version: '3.7'

services:
  postgres:
    image: postgres:12.0
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  gbe:
    build:
      context: ./
      dockerfile: Dockerfile
    image: generic-block-explorer:local
    depends_on:
      - postgres
    environment:
      BLOCK_EXPLORER_REPLICATOR_ADDR: 'docker.for.mac.localhost:5678'
      BLOCK_EXPLORER_DB_URL: 'postgres://postgres:secret@postgres:5432/postgres?sslmode=disable'
      BLOCK_EXPLORER_CONTROLLER_RELOADPERIOD: '1200'
      MIGRATE_URL: 'postgres://postgres:secret@postgres:5432/postgres?sslmode=disable'
    volumes:
      - .artifacts/block-explorer.yaml:/opt/app/config/block-explorer.yaml
      - .artifacts/migrate.yaml:/opt/app/config/migrate.yaml
    command:
      - /bin/bash
      - -c
      - |
        curl https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh > wait.sh
        chmod +x wait.sh
        ./wait.sh "postgres:5432"
        ./migrate --config=/opt/app/config/migrate.yaml
        ./block-explorer --config=/opt/app/config/block-explorer.yaml

  api:
    build:
      context: ./
      dockerfile: Dockerfile
    image: generic-block-explorer:local
    depends_on:
      - postgres
    ports:
      - 8080:8080
    environment:
      BLOCK_EXPLORER_API_DB_URL: 'postgres://postgres:secret@postgres:5432/postgres?sslmode=disable'
      BLOCK_EXPLORER_API_LISTEN: ':8080'
    volumes:
      - .artifacts/api.yaml:/opt/app/config/api.yaml
    command:
      - /bin/bash
      - -c
      - |
        curl https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh > wait.sh
        chmod +x wait.sh
        ./wait.sh "postgres:5432"
        ./api --config=/opt/app/config/api.yaml

  frontend:
    image: insolar/frontend-block-explorer
    depends_on:
      - api
    ports:
      - 8888:80
    environment:
      API_URL: 'http://api:8080'
