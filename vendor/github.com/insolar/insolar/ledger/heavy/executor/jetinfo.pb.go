// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/heavy/executor/jetinfo.proto

package executor

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JetInfo struct {
	Polymorph       int32                                      `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	JetID           github_com_insolar_insolar_insolar.JetID   `protobuf:"bytes,20,opt,name=JetID,proto3,customtype=github.com/insolar/insolar/insolar.JetID" json:"JetID"`
	HotConfirmed    []github_com_insolar_insolar_insolar.JetID `protobuf:"bytes,21,rep,name=HotConfirmed,proto3,customtype=github.com/insolar/insolar/insolar.JetID" json:"HotConfirmed"`
	DropConfirmed   bool                                       `protobuf:"varint,22,opt,name=DropConfirmed,proto3" json:"DropConfirmed,omitempty"`
	BackupConfirmed bool                                       `protobuf:"varint,23,opt,name=BackupConfirmed,proto3" json:"BackupConfirmed,omitempty"`
	Split           bool                                       `protobuf:"varint,24,opt,name=Split,proto3" json:"Split,omitempty"`
	IsSplitSet      bool                                       `protobuf:"varint,25,opt,name=IsSplitSet,proto3" json:"IsSplitSet,omitempty"`
}

func (m *JetInfo) Reset()      { *m = JetInfo{} }
func (*JetInfo) ProtoMessage() {}
func (*JetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_34fe369629dc8d07, []int{0}
}
func (m *JetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JetInfo.Merge(m, src)
}
func (m *JetInfo) XXX_Size() int {
	return m.Size()
}
func (m *JetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JetInfo proto.InternalMessageInfo

type JetsInfo struct {
	Polymorph int32     `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Jets      []JetInfo `protobuf:"bytes,20,rep,name=Jets,proto3" json:"Jets"`
}

func (m *JetsInfo) Reset()      { *m = JetsInfo{} }
func (*JetsInfo) ProtoMessage() {}
func (*JetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_34fe369629dc8d07, []int{1}
}
func (m *JetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JetsInfo.Merge(m, src)
}
func (m *JetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *JetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JetsInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*JetInfo)(nil), "executor.JetInfo")
	proto.RegisterType((*JetsInfo)(nil), "executor.JetsInfo")
}

func init() {
	proto.RegisterFile("ledger/heavy/executor/jetinfo.proto", fileDescriptor_34fe369629dc8d07)
}

var fileDescriptor_34fe369629dc8d07 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4e, 0xfa, 0x40,
	0x14, 0xc5, 0x67, 0xfe, 0xc0, 0x5f, 0x1c, 0x31, 0xea, 0x04, 0xb5, 0x1a, 0x73, 0x69, 0xd0, 0x45,
	0x13, 0x63, 0x6b, 0x74, 0xe3, 0xba, 0x12, 0x23, 0x2c, 0x8b, 0x3e, 0x00, 0x1f, 0xd3, 0x52, 0x2d,
	0x9d, 0xa6, 0x4c, 0x8d, 0xec, 0x7c, 0x04, 0x1f, 0xc3, 0x47, 0x21, 0x71, 0xc3, 0x92, 0xb8, 0x20,
	0xb6, 0x6c, 0x5c, 0xf2, 0x08, 0x86, 0x41, 0xc2, 0xc7, 0xca, 0xb8, 0x9a, 0x7b, 0xcf, 0xfd, 0xdd,
	0x33, 0xc9, 0x3d, 0xe4, 0xd8, 0x63, 0x4d, 0x87, 0x85, 0x46, 0x8b, 0xd5, 0x9e, 0xba, 0x06, 0x7b,
	0x66, 0x8d, 0x48, 0xf0, 0xd0, 0x78, 0x60, 0xc2, 0xf5, 0x6d, 0xae, 0x07, 0x21, 0x17, 0x9c, 0x66,
	0x67, 0xfa, 0xe1, 0x99, 0xe3, 0x8a, 0x56, 0x54, 0xd7, 0x1b, 0xbc, 0x6d, 0x38, 0xdc, 0xe1, 0x86,
	0x04, 0xea, 0x91, 0x2d, 0x3b, 0xd9, 0xc8, 0x6a, 0xba, 0x58, 0x7c, 0xff, 0x47, 0xd6, 0x2a, 0x4c,
	0x94, 0x7d, 0x9b, 0xd3, 0x23, 0xb2, 0x1e, 0x70, 0xaf, 0xdb, 0xe6, 0x61, 0xd0, 0x52, 0xb6, 0x55,
	0xac, 0x65, 0xac, 0xb9, 0x40, 0x6f, 0x48, 0x66, 0x02, 0x96, 0x94, 0xbc, 0x8a, 0xb5, 0x9c, 0x79,
	0xde, 0x1b, 0x16, 0xd0, 0xc7, 0xb0, 0xa0, 0x2d, 0xfc, 0xe7, 0xfa, 0x1d, 0xee, 0xd5, 0xc2, 0xd5,
	0x57, 0x97, 0x7b, 0xd6, 0x74, 0x9d, 0xde, 0x91, 0xdc, 0x2d, 0x17, 0xd7, 0xdc, 0xb7, 0xdd, 0xb0,
	0xcd, 0x9a, 0xca, 0xae, 0x9a, 0xfa, 0x93, 0xdd, 0x92, 0x0b, 0x3d, 0x21, 0x9b, 0xa5, 0x90, 0x07,
	0x73, 0xdb, 0x3d, 0x15, 0x6b, 0x59, 0x6b, 0x59, 0xa4, 0x1a, 0xd9, 0x32, 0x6b, 0x8d, 0xc7, 0x68,
	0x81, 0xdb, 0x97, 0xdc, 0xaa, 0x4c, 0xf3, 0x24, 0x53, 0x0d, 0x3c, 0x57, 0x28, 0x8a, 0x9c, 0x4f,
	0x1b, 0x0a, 0x84, 0x94, 0x3b, 0xb2, 0xac, 0x32, 0xa1, 0x1c, 0xc8, 0xd1, 0x82, 0x52, 0xbc, 0x27,
	0xd9, 0x0a, 0x13, 0x9d, 0x5f, 0x5c, 0xf3, 0x94, 0xa4, 0x27, 0xa4, 0x92, 0x57, 0x53, 0xda, 0xc6,
	0xc5, 0x8e, 0x3e, 0xcb, 0x4f, 0xff, 0x09, 0xc3, 0x4c, 0x4f, 0x0e, 0x62, 0x49, 0xc8, 0xbc, 0xea,
	0xc5, 0x80, 0xfa, 0x31, 0xa0, 0x41, 0x0c, 0x68, 0x1c, 0x03, 0x7e, 0x49, 0x00, 0xbf, 0x25, 0x80,
	0x7b, 0x09, 0xe0, 0x7e, 0x02, 0xf8, 0x33, 0x01, 0xfc, 0x95, 0x00, 0x1a, 0x27, 0x80, 0x5f, 0x47,
	0x80, 0xfa, 0x23, 0x40, 0x83, 0x11, 0xa0, 0xfa, 0x7f, 0x99, 0xf2, 0xe5, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0xc0, 0xe9, 0x7a, 0x45, 0x02, 0x00, 0x00,
}

func (this *JetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JetInfo)
	if !ok {
		that2, ok := that.(JetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.JetID.Equal(that1.JetID) {
		return false
	}
	if len(this.HotConfirmed) != len(that1.HotConfirmed) {
		return false
	}
	for i := range this.HotConfirmed {
		if !this.HotConfirmed[i].Equal(that1.HotConfirmed[i]) {
			return false
		}
	}
	if this.DropConfirmed != that1.DropConfirmed {
		return false
	}
	if this.BackupConfirmed != that1.BackupConfirmed {
		return false
	}
	if this.Split != that1.Split {
		return false
	}
	if this.IsSplitSet != that1.IsSplitSet {
		return false
	}
	return true
}
func (this *JetsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JetsInfo)
	if !ok {
		that2, ok := that.(JetsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if len(this.Jets) != len(that1.Jets) {
		return false
	}
	for i := range this.Jets {
		if !this.Jets[i].Equal(&that1.Jets[i]) {
			return false
		}
	}
	return true
}
func (this *JetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&executor.JetInfo{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "JetID: "+fmt.Sprintf("%#v", this.JetID)+",\n")
	s = append(s, "HotConfirmed: "+fmt.Sprintf("%#v", this.HotConfirmed)+",\n")
	s = append(s, "DropConfirmed: "+fmt.Sprintf("%#v", this.DropConfirmed)+",\n")
	s = append(s, "BackupConfirmed: "+fmt.Sprintf("%#v", this.BackupConfirmed)+",\n")
	s = append(s, "Split: "+fmt.Sprintf("%#v", this.Split)+",\n")
	s = append(s, "IsSplitSet: "+fmt.Sprintf("%#v", this.IsSplitSet)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JetsInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&executor.JetsInfo{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	if this.Jets != nil {
		vs := make([]*JetInfo, len(this.Jets))
		for i := range vs {
			vs[i] = &this.Jets[i]
		}
		s = append(s, "Jets: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringJetinfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *JetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintJetinfo(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintJetinfo(dAtA, i, uint64(m.JetID.Size()))
	n1, err := m.JetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.HotConfirmed) > 0 {
		for _, msg := range m.HotConfirmed {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintJetinfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DropConfirmed {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BackupConfirmed {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.BackupConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Split {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.Split {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSplitSet {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsSplitSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JetsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintJetinfo(dAtA, i, uint64(m.Polymorph))
	}
	if len(m.Jets) > 0 {
		for _, msg := range m.Jets {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintJetinfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintJetinfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovJetinfo(uint64(m.Polymorph))
	}
	l = m.JetID.Size()
	n += 2 + l + sovJetinfo(uint64(l))
	if len(m.HotConfirmed) > 0 {
		for _, e := range m.HotConfirmed {
			l = e.Size()
			n += 2 + l + sovJetinfo(uint64(l))
		}
	}
	if m.DropConfirmed {
		n += 3
	}
	if m.BackupConfirmed {
		n += 3
	}
	if m.Split {
		n += 3
	}
	if m.IsSplitSet {
		n += 3
	}
	return n
}

func (m *JetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovJetinfo(uint64(m.Polymorph))
	}
	if len(m.Jets) > 0 {
		for _, e := range m.Jets {
			l = e.Size()
			n += 2 + l + sovJetinfo(uint64(l))
		}
	}
	return n
}

func sovJetinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJetinfo(x uint64) (n int) {
	return sovJetinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JetInfo{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`JetID:` + fmt.Sprintf("%v", this.JetID) + `,`,
		`HotConfirmed:` + fmt.Sprintf("%v", this.HotConfirmed) + `,`,
		`DropConfirmed:` + fmt.Sprintf("%v", this.DropConfirmed) + `,`,
		`BackupConfirmed:` + fmt.Sprintf("%v", this.BackupConfirmed) + `,`,
		`Split:` + fmt.Sprintf("%v", this.Split) + `,`,
		`IsSplitSet:` + fmt.Sprintf("%v", this.IsSplitSet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JetsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JetsInfo{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Jets:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Jets), "JetInfo", "JetInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringJetinfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJetinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJetinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJetinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotConfirmed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJetinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJetinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.JetID
			m.HotConfirmed = append(m.HotConfirmed, v)
			if err := m.HotConfirmed[len(m.HotConfirmed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropConfirmed = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BackupConfirmed = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Split = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSplitSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSplitSet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJetinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJetinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJetinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJetinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJetinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJetinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jets = append(m.Jets, JetInfo{})
			if err := m.Jets[len(m.Jets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJetinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJetinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJetinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJetinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJetinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJetinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJetinfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthJetinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJetinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJetinfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthJetinfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJetinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJetinfo   = fmt.Errorf("proto: integer overflow")
)
